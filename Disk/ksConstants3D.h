#pragma once

#define ID_FILE_NEW     0xE100
#define ID_FILE_OPEN    0xE101
#define ID_FILE_CLOSE   0xE102
#define ID_FILE_SAVE    0xE103
#define ID_FILE_SAVE_AS 0xE104
#define ID_FILE_PRINT_SETUP   0xE106
#define ID_FILE_PRINT         0xE107
#define ID_FILE_PRINT_PREVIEW 0xE109
#define ID_FILE_SEND_MAIL 0xE10C
#define ID_EDIT_CLEAR         0xE120
#define ID_EDIT_CLEAR_ALL     0xE121
#define ID_EDIT_COPY          0xE122
#define ID_EDIT_CUT           0xE123
#define ID_EDIT_FIND          0xE124
#define ID_EDIT_PASTE         0xE125
#define ID_EDIT_REPEAT        0xE128
#define ID_EDIT_REPLACE       0xE129
#define ID_EDIT_SELECT_ALL    0xE12A
#define ID_EDIT_UNDO          0xE12B
#define ID_EDIT_REDO          0xE12C
#define ID_WINDOW_NEW 0xE130
#define ID_APP_ABOUT  0xE140
#define ID_HELP_INDEX 0xE142
#define ID_HELP_FINDER 0xE143
#define ID_CONTEXT_HELP 0xE145
#define ID_HELP         0xE146



/// Типы 3D объектов.
enum ksObj3dTypeEnum : int
{
  o3d_unknown             = 0,  ///< Неизвестный (включает все объекты).
  o3d_planeXOY            = 1,  ///< Плоскость XOY.
  o3d_planeXOZ            = 2,  ///< Плоскость XOZ.
  o3d_planeYOZ            = 3,  ///< Плоскость YOZ.
  o3d_pointCS             = 4,  ///< Точка начала системы координат.
  o3d_sketch              = 5,  ///< Эскиз.
  o3d_face                = 6,  ///< Грань.
  o3d_edge                = 7,  ///< Ребро.
  o3d_vertex              = 8,  ///< Вершина.
  o3d_axis2Planes         = 9,  ///< Ось по двум плоскостям.
  o3d_axis2Points         = 10,  ///< Ось по двум точкам.
  o3d_axisConeFace        = 11,  ///< Ось конической грани.
  o3d_axisEdge            = 12,  ///< Ось проходящая через ребро.
  o3d_axisOperation       = 13,  ///< Ось операции.
  o3d_planeOffset         = 14,  ///< Смещённая плоскость.
  o3d_planeAngle          = 15,  ///< Плоскость под углом.
  o3d_plane3Points        = 16,  ///< Плоскость по 3-м точкам.
  o3d_planeNormal         = 17,  ///< Нормальная плоскость.
  o3d_planeTangent        = 18,  ///< Касательная плоскость.
  o3d_planeEdgePoint      = 19,  ///< Плоскость через ребро и вершину.
  o3d_planeParallel       = 20,  ///< Плоскость через вершину параллельно другой плоскости.
  o3d_planePerpendicular  = 21,  ///< Плоскость через вершину перпендикулярно ребру.
  o3d_planeLineToEdge     = 22,  ///< Плоскость через ребро пар-но/пер-но другому ребру.
  o3d_planeLineToPlane    = 23,  ///< Плоскость через ребро пар-но/пер-но грани.
  o3d_baseExtrusion       = 24,  ///< Базовая операция выдавливания.
  o3d_bossExtrusion       = 25,  ///< Приклеивание выдавливанием.
  o3d_cutExtrusion        = 26,  ///< Вырезать выдавливанием.
  o3d_baseRotated         = 27,  ///< Базовая операция вращения.
  o3d_bossRotated         = 28,  ///< Приклеивание вращением.
  o3d_cutRotated          = 29,  ///< Вырезать вращением.
  o3d_baseLoft            = 30,  ///< Базовая операция по сечениям.
  o3d_bossLoft            = 31,  ///< Приклеивание по сечениям.
  o3d_cutLoft             = 32,  ///< Вырезать по сечениям.
  o3d_chamfer             = 33,  ///< Операция 'фаска'.
  o3d_fillet              = 34,  ///< Операция 'скругление'.
  o3d_meshCopy            = 35,  ///< Операция копирования по сетке.
  o3d_circularCopy        = 36,  ///< Операция копирования по концентрической сетке.
  o3d_curveCopy           = 37,  ///< Операция копирования по кривой.
  o3d_circPartArray       = 38,  ///< Операция массив по концентрической сетке для сборки.
  o3d_meshPartArray       = 39,  ///< Операция массив по сетке для сборки.
  o3d_curvePartArray      = 40,  ///< Операция массив по кривой для сборки.
  o3d_derivPartArray      = 41,  ///< Операция массив по образцу для сборки.
  o3d_incline             = 42,  ///< Операция 'уклон'.
  o3d_shellOperation      = 43,  ///< Операция 'оболочка'.
  o3d_ribOperation        = 44,  ///< Операция 'ребро жесткости'.
  o3d_baseEvolution       = 45,  ///< Кинематическая операция.
  o3d_bossEvolution       = 46,  ///< Приклеинть кинематически.
  o3d_cutEvolution        = 47,  ///< Вырезать кинематически.
  o3d_mirrorOperation     = 48,  ///< Операция 'зеркальный массив'.
  o3d_mirrorAllOperation  = 49,  ///< Операция 'зеркально отразить все'.
  o3d_cutByPlane          = 50,  ///< Операция 'сечение поверхностью'.
  o3d_cutBySketch         = 51,  ///< Операция 'сечение эскизом'.
  o3d_holeOperation       = 52,  ///< Отверстие.
  o3d_polyline            = 53,  ///< Ломаная.
  o3d_conicSpiral         = 54,  ///< Коническая спираль.
  o3d_spline              = 55,  ///< Сплайн.
  o3d_cylindricSpiral     = 56,  ///< Цилиндрическая спираль.
  o3d_importedSurface     = 57,  ///< Импортирванная поверхность.
  o3d_thread              = 58,  ///< Условное изображение резьбы.
  o3d_EvolutionSurface    = 59,  ///< Кинематическая поверхность.
  o3d_ExtrusionSurface    = 60,  ///< Поверхность выдавливания.
  o3d_RotatedSurface      = 61,  ///< Поверхность вращения.
  o3d_LoftSurface         = 62,  ///< Поверхность по сечениям.
  o3d_MacroObject         = 63,  ///< Макрообъект 3D.
  o3d_UnionComponents     = 64,  ///< Операция объединение компонентов.
  o3d_MoldCavity          = 65,  ///< Операция вычитание компонентов.
  o3d_planeMiddle         = 66,  ///< Средняя плоскость.
  o3d_controlPoint        = 67,  ///< Контрольная точка.
  o3d_conjunctivePoint    = 68,  ///< Присоединительная точка.
  o3d_aggregate           = 69,  ///< Булева операция
  o3d_point3D             = 70,  ///< Конструктивная 3D точка.
  o3d_axisOX              = 71,  ///< Ось OX.
  o3d_axisOY              = 72,  ///< Ось OY.
  o3d_axisOZ              = 73,  ///< Ось OZ.
  o3d_sheetMetalBody      = 74,  ///< Листовое тело
  o3d_sheetMetalBend      = 75,  ///< Сгиб
  o3d_sheetMetalLineBend  = 76,  ///< Сгиб по линии
  o3d_sheetMetalHole      = 77,  ///< Элемент листового тела 'отверстие'
  o3d_sheetMetalCut       = 78,  ///< Элемент листового тела 'вырез'
  o3d_UnHistoried         = 79,  ///< Операция без истории
  o3d_baselineDimension3D  = 80,  ///< Линейный размер 3D (от отрезка до точки).
  o3d_lineDimension3D      = 81,  ///< Линейный размер 3D (на плоскости).
  o3d_radialDimension3D    = 82,  ///< Радиальный размер 3D.
  o3d_diametralDimension3D = 83,  ///< Диаметральный размер 3D.
  o3d_angleDimension3D     = 84,  ///< Угловой размер 3D.
  o3d_localCoordinateSystem = 85,  ///< Локальная система координат.
  o3d_leader3D             = 86,  ///< Линия выноски 3D.
  o3d_markLeader3D         = 87,  ///< Знак маркировки 3D.
  o3d_rough3D              = 88,  ///< Обозначение 3D шероховатости.
  o3d_positionLeader3D     = 89,  ///< Обозначение позиции 3D.
  o3d_brandLeader3D        = 90,  ///< Знак клеймения 3D.
  o3d_base3D               = 91,  ///< Обозначение 3D базы.
  o3d_tolerance3D          = 92,  ///< Допуск формы 3D.
  o3d_SplitLine            = 93,  ///< Линия разъема.
  o3d_SurfacePatch         = 94,  ///< Заплатка.
  o3d_FaceRemover          = 95,  ///< Операция удаления граней.
  o3d_SurfaceSewer         = 96,  ///< Операция сшивки поверхностей.
  o3d_NurbsSurface         = 97,  ///< NURBS-поверхность.
  o3d_SurfacesIntersectionCurve = 98,  ///< Кривая пересечения поверхностей.
  o3d_lastEntityElement    = 99,  ///< Всегда последний из Entity!!!.
  o3d_variable            = 100,  ///< Параметрическая переменная.
  o3d_placement           = 101,  ///< Местоположение.
  o3d_entityCollection    = 102,  ///< Массив 3d объектов.
  o3d_document            = 103,  ///< Документ 3d.
  o3d_part                = 104,  ///< Деталь.
  o3d_entity              = 105,  ///< Объект.
  o3d_mateConstraint      = 106,  ///< Сопряжение.
  o3d_mateConstraintCollection = 107,  ///< Массив сопряжений.
  o3d_partCollection      = 108,  ///< Массив элементов сборки.
  o3d_constrElement       = 109,  ///< Конструктивные элементы - плоскости и оси.
  o3d_operationElement    = 110,  ///< Операции.
  o3d_curveElement        = 111,  ///< Кривые (пространственные и ребра).
  o3d_rasterFormat     = 112,  ///< Интерфейс параметров для конвертации в растровый формат.
  o3d_additionFormat = 113,  ///< Интерфейс параметров для конвертации в дополнительные форматы jgs, sat, xt, x_b, step, stl, VRML, JT.
  o3d_bodyCollection      = 114,  ///< Интерфейс массива тел 3D.
  o3d_body                = 115,  ///< Интерфейс тела 3D.
  o3d_faceCollection      = 116,  ///< Интерфейс массива граней.
  o3d_tessellation        = 117,  ///< Интерфейс триангуляции.
  o3d_facet               = 118,  ///< Интерфейс триангуляционной пластины.
  o3d_featureCollection   = 119,  ///< Интерфейс массива объектов дерева .
  o3d_feature             = 120,  ///< Интерфейс объекта дерева.
  o3d_edgeCollection      = 121,  ///< Интерфейс массива ребер.
  o3d_orientedEdge        = 122,  ///< Интерфейс ориентированного ребра.
  o3d_orientedEdgeCollection = 123,  ///< Интерфейс массива ориентированных ребер.
  o3d_loop                = 124,  ///< Интерфейс цикла.
  o3d_loopCollection      = 125,  ///< Интерфейс массива циклов.
  o3d_curve3D        = 126,  ///< Интерфейс математической кривой в трехмерном пространстве.
  o3d_surface   = 127,  ///< Интерфейс математической поверхности в трехмерном пространстве.
  o3d_massInertiaParam = 128,  ///< Интерфейс параметров для расчета массо-центровочных характеристик.
  o3d_lineseg3dParam      = 129,  ///< Интерфейс параметров 3d LineSeg.
  o3d_circle3dParam       = 130,  ///< Интерфейс параметров 3d Circle.
  o3d_ellipse3dParam      = 131,  ///< Интерфейс параметров 3d Ellipce.
  o3d_nurbsPoint3dParam   = 132,  ///< Интерфейс параметров точки для Nurbs 3D.
  o3d_nurbsPoint3dCollection = 133,  ///< Интерфейс массива точек для Nurbs 3D.
  o3d_nurbsPoint3dCollCollection = 134,  ///< Интерфейс массива массивов точек для Nurbs 3D Surface.
  o3d_nurbsKnotCollection = 135,  ///< Интерфейс массива узлов для Nurbs 3D.
  o3d_nurbs3dParam        = 136,  ///< Интерфейс параметров Nurbs-сплайна 3D.
  o3d_planeParam          = 137,  ///< Интерфейс параметров плоскости.
  o3d_coneParam           = 138,  ///< Интерфейс параметров конической поверхности.
  o3d_cylinderParam       = 139,  ///< Интерфейс параметров цилиндрической поверхности.
  o3d_sphereParam         = 140,  ///< Интерфейс параметров сферы.
  o3d_torusParam          = 141,  ///< Интерфейс параметров тора.
  o3d_nurbsSurfaceParam   = 142,  ///< Интерфейс параметров Nurbs-поверхности.
  o3d_mateConstraintGroup = 143,  ///< Объект дерева :группа сопряжений.
  o3d_measurer = 144,  ///< Интерфейс для измерений расстояния и угла между двумя примитивами (гранями, ребрами, вершинами).
  o3d_selectionMng        = 145,  ///< Интерфейс менеджера селектированных объектов.
  o3d_chooseMng           = 146,  ///< Интерфейс менеджера выбора (подсветки) объектов.
  o3d_arc3dParam          = 147,  ///< Интерфейс параметров 3d Arc.
  o3d_deletedCopyCollection = 148,  ///< Интерфейс массива удаленных индексов для оперций копирования и массивов компонент.
  o3d_viewProjection      = 149,  ///< Интерфейс проекции отображения модели в окне.
  o3d_viewProjectionCollection = 150,  ///< Интерфейс массива проекций отображения модели в окне.
  o3d_attribute           = 151,  ///< Интерфейс атрибута.
  o3d_attributeCollection = 152,  ///< Интерфейс массива атрибутов.
  o3d_componentPositioner = 153,  ///< Интерфейс управления положением компонентов в сборке.
  o3d_modelLibrary        = 154,  ///< Интерфейс библиотеки моделей.
  o3d_ObjectsFilter3D     = 155,  ///< Интерфейс фильтрации объектов 3D.
  o3d_coordinate3dCollection = 156,  ///< Интерфейс колекции координат.
  o3d_intersectionResult     = 157,  ///< Интерфейс результатов пересечений двух тел.
  o3d_PolygonalLineVertexParam = 158,  ///< Пораметры вершины полилинии.
  o3d_variableCollection    = 159,  ///< Массив параметрических переменных.
  o3d_sTrackingPointsMeasurer = 160,  ///< Интерфейс для рассчета координат точек при S- образном соединении прямолинейных рёбер.
  o3d_surfaceElement        = 161,  ///< Поверхности.
  o3d_designationElement    = 162,  ///< Размеры и условные обозначения.
  o3d_copyleftObject        = 163,  ///< Объекты доступные для копирования.
  o3d_Embodiment            = 164,  ///< Исполнение.
  o3d_userMateConstraint    = 165,  ///< Пользовательское сопряжение.
  o3d_intervalVariable      = 166,  ///< Интервальная переменная.
  o3d_userFunc              = 167,  ///< Функциональная переменная.
  o3d_firstEntityElement2     = 500,  ///< Первый из Entity2!!!.
  o3d_Equidistant3D           = 501,  ///< Эквидистанта 3D.
  o3d_TrimmedCurve            = 502,  ///< Операция усеченния кривой.
  o3d_TrimmedCurveObject      = 503,  ///< Усеченная кривая.
  o3d_AuxMeshCopy             = 504,  ///< Массив вспомогательной геометрии по сетке.
  o3d_AuxCircularCopy         = 505,  ///< Массив вспомогательной геометрии по концентрической сетке.
  o3d_AuxCurveCopy            = 506,  ///< Массив вспомогательной геометрии вдоль кривой.
  o3d_PointDrivenPattern      = 507,  ///< Массив операций по точкам.
  o3d_PartsPointDrivenPattern = 508,  ///< Массив компонентов по точкам.
  o3d_AuxMirrorOperation      = 509,  ///< Зеркальный массив вспомогательной геометрии.
  o3d_ConnectCurve            = 510,  ///< Операция соединения кривых.
  o3d_ConnectCurveObject      = 511,  ///< Кривая соединения.
  o3d_FilletCurve             = 512,  ///< Операция скругления кривых.
  o3d_FilletCurveObject       = 513,  ///< Скругленная кривая.
  o3d_EquidistantSurface      = 514,  ///< Операция построения эквидистанты поверхности.
  o3d_RuledSurface            = 515,  ///< Линейчатая поверхность.
  o3d_TrimmedSurface          = 516,  ///< Операция усечения поверхности.
  o3d_ExtensionSurface        = 517,  ///< Операция продления поверхности.
  o3d_SurfaceThickening       = 518,  ///< Операция придания толщины поверхности.
  o3d_Arc3D                   = 519,  ///< 3D дуга.
  o3d_AuxPointDrivenPattern   = 520,  ///< Массив вспомогательной геометрии по точкам.
  o3d_BodiesPointDrivenPattern= 521,  ///< Массив тел по точкам.
  o3d_TablePattern            = 522,  ///< Массив операций по таблице из файла.
  o3d_PartsTablePattern       = 523,  ///< Массив компонентов по таблице из файла.
  o3d_AuxTablePattern         = 524,  ///< Массив вспомогательной геометрии по таблице из файла.
  o3d_BodiesTablePattern      = 525,  ///< Массив тел по таблице из файла.
  o3d_MeshPointsSurface       = 526,  ///< Поверхность по сети точек.
  o3d_CloudPointsSurface      = 527,  ///< Поверхность по облаку точек.
  o3d_BodiesMeshCopy          = 528,  ///< Массив тел по сетке.
  o3d_BodiesCircularCopy      = 529,  ///< Массив тел по концентрической сетке.
  o3d_BodiesCurveCopy         = 530,  ///< Массив тел вдоль кривой.
  o3d_Scaling3D               = 531,  ///< Масштабирование.
  o3d_MirrorPart               = 532,  ///< Зеркальная деталь, с внешней ссылкой на источник (зеркальная встака детали заготовки).
  o3d_sheetMetalUndercut       = 533,  ///< Листовой металл, операция подсечка.
  o3d_sheetMetalPlate          = 534,  ///< Листовой металл, операция пластина.
  o3d_sheetMetalCombinedBend   = 535,  ///< Листовой металл, операция комбинированный сгиб. Сгиб по эскизу
  o3d_sheetMetalBendStraighten = 536,  ///< Листовой металл, операция разогнуть.
  o3d_sheetMetalBendBended     = 537,  ///< Листовой металл, операция согнуть.
  o3d_sheetMetalBendUnfold     = 538,  ///< Листовой металл, операция развертка.
  o3d_sheetMetalClosedCorner   = 539,  ///< Листовой металл, операция 'замыкание углов'.
  o3d_sheetMetalBendObject     = 540,  ///< Листовой металл, сгибы листовых операций.
  o3d_sheetMetalDimpleCutout   = 541,  ///< Листовой металл, закрытая штамповка.
  o3d_sheetMetalDrawnCutout    = 542,  ///< Листовой металл, открытая штамповка.
  o3d_sheetMetalBeat           = 543,  ///< Листовой металл, буртик.
  o3d_sheetMetalLouver         = 544,  ///< Листовой металл, жалюзи.
  o3d_sheetMetalCowling        = 545,  ///< Обечайка.
  o3d_PointsArrOnCurve         = 546,  ///< Группа точек по кривой.
  o3d_PointsArrFromFile        = 547,  ///< Группа точек из файла.
  o3d_PointsArrOnSurface       = 548,  ///< Группа точек на поверхности.
  o3d_ArrayExemplar            = 549,  ///< Экземпляр массива.
  o3d_AuxGeomArrayExemplar     = 550,  ///< Экземпляр массива вспомогательной геометрии.
  o3d_BodyArrayExemplar        = 551,  ///< Экземпляр массива копирования тел.
  o3d_NurbsSurfaceByCurvesMesh = 552,  ///< Сплайновая поверхность по сетке кривых.
  o3d_PlaneByPointAndTangentToFace = 553,  ///< Конструктивная касательная плоскость к грани в точке.
  o3d_PlaneByPlaneCurve        = 554,  ///< Конструктивная касательная плоскость через плоскую кривую.
  o3d_JointSurface             = 555,  ///< Поверхность соединения.
  o3d_DistanceAngleMeasure     = 556,  ///< Объект 'Измерение расстояния и угла'.
  o3d_EdgeLengthMeasure        = 557,  ///< Объект 'Измерение длины ребра'.
  o3d_AreaMeasure              = 558,  ///< Объект 'Измерение площади'.
  o3d_AxisFromPointByDirection = 559,  ///< Ось через вершину по направлению.
  o3d_Curve3DWithoutHistory    = 560,  ///< Кривая без истории.
  o3d_CurveBy2Projections      = 561,  ///< Кривая по двум проекциям.
  o3d_CurveByLaw               = 562,  ///< Кривая по закону.
  o3d_IsoparametricCurve       = 563,  ///< Изопараметрическая кривая.
  o3d_CurveOutLine             = 564,  ///< Линия очерка.
  o3d_SplineOnSurface          = 565,  ///< Сплайн на поверхности.
  o3d_IsoparametricCurvesSet   = 566,  ///< Группа изпараметрических кривых.
  o3d_ProjectionCurve          = 567,  ///< Проекционная кривая.
  o3d_Contour3D                = 568,  ///< Контур 3D.
  o3d_BodyReposition           = 569,  ///< Перепозиционирование тела, поверхности.
  o3d_LineSegment3D            = 570,  ///< Отрезок 3D.
  o3d_Billet                   = 571,  ///< Операция 'деталь заготовка'.
  o3d_PolyLine3DPoint          = 572,  ///< Точка ломаной и сплайна'.
  o3d_OperationLinearDimension     = 573,  ///< Управляющий линейный размер операции 3D.
  o3d_OperationAngularDimension    = 574,  ///< Управляющий угловой размер операции 3D.
  o3d_OperationRadialDimension     = 575,  ///< Управляющий радиальный размер операции 3D.
  o3d_OperationDiametralDimension  = 576,  ///< Управляющий диаметральный размер операции 3D.
  o3d_SketchLinearDimension        = 577,  ///< Управляющий линейный размер эскиза 3D.
  o3d_SketchAngularDimension       = 578,  ///< Управляющий угловой размер эскиза 3D.
  o3d_SketchBreakAngularDimension  = 579,  ///< Управляющий угловой размер эскиза 3D с обрывом.
  o3d_SketchRadialDimension        = 580,  ///< Управляющий радиальный размер эскиза 3D.
  o3d_SketchBreakRadialDimension   = 581,  ///< Управляющий радиальный размер эскиза 3D с обрывом.
  o3d_SketchDiametralDimension     = 582,  ///< Управляющий диаметральный размер эскиза 3D.
  o3d_Hole3D                       = 583,  ///< Отверстие 3D.
  o3d_UserObjectOperation          = 584,  ///< Пользовательская многотельная операция
  o3d_Zone3D                       = 585,  ///< Зона 3D.
  o3d_Zone3DDivision               = 586,  ///< Разбиение зон.
  o3d_Zones3D                      = 587,  ///< Группа Зоны 3D.
  o3d_WireFrame3D                  = 588,  ///< Трехмерный каркас.
  o3d_CopyGeometry                 = 589,  ///< Копия геометрии.
  o3d_CollectionGeometry           = 590,  ///< Коллекция геометрии.
  o3d_MeshPatternAnyCopy           = 591,  ///< Копирование произвольных объектов по сетке.
  o3d_CircularPatternAnyCopy       = 592,  ///< Копирование произвольных объектов по окружности.
  o3d_CurvePatternAnyCopy          = 593,  ///< Копирование произвольных объектов по кривой.
  o3d_PointDrivenPatternAnyCopy    = 595,  ///< Копирование произвольных объектов по точкам.
  o3d_TablePatternAnyCopy          = 596,  ///< Копирование произвольных объектов по таблице.
  o3d_LinearUnhistoriedDimension   = 597,  ///< Импортированный линейный размер.
  o3d_AngularUnhistoriedDimension  = 598,  ///< Импортированный угловой размер.
  o3d_RadialUnhistoriedDimension   = 599,  ///< Импортированный радиальный размер.
  o3d_DiametralUnhistoriedDimension= 600,  ///< Импортированный диаметральный размер.
  o3d_FaceLift                     = 601,  ///< Операция подтягивания граней.
  o3d_UserWireFrame3D              = 602,  ///< Трехмерный каркас - пользовательский объект.
  o3d_UndefPartObject              = 603,  ///< Модельный объект неопределенного типа.
  o3d_SpecRough3D                  = 604,  ///< Неуказанная шероховатость 3D.
  o3d_SketchBreakLinearDimension   = 605,  ///< Управляющий линейный размер эскиза 3D с обрывом.
  o3d_sheetMetalLinearCowling      = 606,  ///< Линейчатая обечайка.
  o3d_UserDesignationObject3D      = 607,  ///< Пользовательский объект обозначение 3D.
  o3d_SplineFormOperation          = 608,  ///< Операция прямого редактирования.
  o3d_UnhistoriedBase3D            = 609,  ///< База без истории.
  o3d_UnhistoriedThread            = 610,  ///< Резьба без истории.
  o3d_UserDesignationCompObj       = 611,  ///< Составной объект для пользовательских объектов обозначений 3D.
  o3d_UserFolder                   = 612,  ///< Пользовательская директория 3D.
  o3d_MeshObject3D                 = 613,  ///< Полигональный объект 3D.
  o3d_sheetMetalRib                = 614,  ///< Ребро усиления.
  o3d_axis3D                       = 615,  ///< Ось 3D.
  o3d_SubFoldLine                  = 616,  ///< Подобъект Линия сгиба.
  o3d_OperationLeaderDimension     = 617,  ///< Управляющий размер операции в виде линии выноски.
  o3d_FullFillet                   = 618,  ///< Полное скругление.
  o3d_DynamicCrossSection          = 619,  ///< Динамическое сечение.
  o3d_RestoredSurface              = 620,  ///< Восстановленная поверхность.
  o3d_CurvatureGraph               = 621,  ///< График кривизны.
  o3d_CollisionObject              = 622,  ///< Информация о коллизии.
  o3d_CurvatureCheckObject         = 623,  ///< Проверка кривизны.
  o3d_ContinuityCheck              = 624,  ///< Проверка непрерывности.
  o3d_SketchFace                   = 625,  ///< Контур эскиза.
  o3d_SectionAnalysis              = 626,  ///< Сетка графиков кривизны.
  o3d_Text3D                       = 627,  ///< Надпись 3D.
  o3d_SketchArcDimension           = 628,  ///< Управляющий размер дуги окружности эскиза 3D.
  o3d_ArcDimension3D               = 629,  ///< Размер дуги окружности 3D.
  o3d_sheetMetalPunch              = 630,  ///< Листовой металл, штамповка телом.
  o3d_sheetMetalFlanging           = 631,  ///< Листовой металл, отбортовка.
  o3d_FaceMover                    = 632,  ///< Операция переместить грани.
  o3d_SplitSolid                   = 633,  ///< Операция 'Разрезать'.
  o3d_sheetMetalConvertFromBody    = 634,  ///< Операция 'Преобразования в листовое тело'.
  o3d_ConicSectionSurface          = 635,  ///< Поверхность конического сечения.
  o3d_TechnicalDemand3D            = 636,  ///< Технические требования 3D.
  o3d_ModelText                    = 637,  ///< Текст в модели.
  o3d_ModelTable                   = 638,  ///< Таблица в модели.
  o3d_ConicCurve3D                 = 639,  ///< Коническая 3D кривая.
  o3d_ExtensionCurve               = 640,  ///< Продление кривой.
  o3d_WrapCurve                    = 641,  ///< Свернутая кривая.
  o3d_UnwrapCurve                  = 642,  ///< Развернутая кривая.
  o3d_PlaneUnhistoried             = 643,  ///< Плоскость без истории.
  o3d_DraftFromEdges               = 644,  ///< Операция 'Уклон от базовой линии'.
  o3d_lastEntityElement2      = 1500   ///< Всегда последний из Entity2!!!.
};


/// Типы 3D объектов.


/// Ошибки 3D.
enum ErrorType3d : int
{
  et3dNo3dDocument  = -7,  ///< Документ не активизирован или не является деталью/сборкой.
  et3dAbort         = -1,  ///< Аварийное завершение.
  et3dError1        = 1,  ///< 3D документ уже создан.
  et3dError2        = 2,  ///< Документ 3D-модели уже открыт.
  et3dError3        = 3,  ///< Ошибка при создании документа 3D-модели.
  et3dError4        = 4,  ///< Недопустимая операция для  3D-модели.
  et3dError5        = 5,  ///< Объект не найден в данном документе 3D-модели.
  et3dError6        = 6,  ///< Неверный тип параметров редактирования.
  et3dError7        = 7,  ///< Объект должен быть 3D локальной системой координат.
  et3dError8        = 8,  ///< Недостаточное количество эскизов для операции.
  et3dError9        = 9,  ///< У контура слишком много осей.
  et3dError10       = 10,  ///< У контура не хватает осей.
  et3dError11       = 11,  ///< Слишком много контуров.
  et3dError12       = 12,  ///< У контура есть 'звезда'.
  et3dError13       = 13,  ///< Самопересечение контура.
  et3dError14       = 14,  ///< Самопересечение в продолжении контура.
  et3dError15       = 15,  ///< Пересечение контуров.
  et3dError16       = 16,  ///< Образующий контур не пересекает тела.
  et3dError17 = 17,  ///< Образующий контур не пересекает сечения (для операции построения тела по сечениям).
  et3dError18       = 18,  ///< Фрагмент не найден в библиотеке.
  et3dError19       = 19,  ///< Контур должен быть замкнут.
  et3dError20       = 20,  ///< Контур должен быть разомкнут.
  et3dError21       = 21,  ///< Пересечение контура с осью.
  et3dError22       = 22,  ///< Вырожденная ось у контура.
  et3dError23       = 23,  ///< Тело состоит из отдельных частей.
  et3dError24       = 24,  ///< Ошибочная кривая.
  et3dError25       = 25,  ///< Ошибочный контур.
  et3dError26       = 26,  ///< Ошибочная поверхность.
  et3dError27       = 27,  ///< Ошибочное тело.
  et3dError28       = 28,  ///< Ошибочный параметр.
  et3dError29       = 29,  ///< Неправильно задана толщина.
  et3dError30       = 30,  ///< Не последовательное расположение сечений вдоль кривой (для операции построения тела по сечениям).
  et3dError31       = 31,  ///< Объект самопересекается.
  et3dError32       = 32,  ///< Объекты не пересекаются.
  et3dError33       = 33,  ///< Объекты пересекается с ошибкой.
  et3dError34       = 34,  ///< Ошибка в булевой операции.
  et3dError35       = 35,  ///< Ребра не найдены.
  et3dError36       = 36,  ///< Ошибка при подготовке операции.
  et3dError37       = 37,  ///< Ошибка при создании фаски ребра.
  et3dError38       = 38,  ///< Ошибка при создании скругления ребра.
  et3dError39       = 39,  ///< Созданы фаски не на всех ребрах.
  et3dError40       = 40,  ///< Скруглены не все ребра.
  et3dError41       = 41,  ///< Ошибка при создании поверхности фаски ребра.
  et3dError42       = 42,  ///< Ошибка при создании поверхности скругления ребра.
  et3dError43       = 43,  ///< Слишком большые катеты фаски.
  et3dError44       = 44,  ///< Слишком большой радиус скругления.
  et3dError45       = 45,  ///< Фаски построены не для всех ребер.
  et3dError46       = 46,  ///< Скруглены не все ребра.
  et3dError47       = 47,  ///< Ошибка резки поверхностью.
  et3dError48       = 48,  ///< Ошибка при создании тонкостенного тела.
  et3dError49       = 49,  ///< Слишком большая толщина стенки при создании тонкостенного тела.
  et3dError50       = 50,  ///< Ошибочная грань.
  et3dError51       = 51,  ///< Контур пустой.
  et3dError52       = 52,  ///< Неизвестная ошибка постановки ребра жесткости.
  et3dError53       = 53,  ///< Неизвестная ошибка уклона граней тела.
  et3dError54       = 54,  ///< Неизвестная ошибка.
  et3dError55       = 55,  ///< Ошибка в определении имени файла.
  et3dError56       = 56,  ///< Ошибка в определении детали.
  et3dError57       = 57,  ///< Ошибка в определении объекта.
  et3dError58       = 58,  ///< Ошибка в определении типа сопряжения.
  et3dError59       = 59,  ///< Ошибка при выполненин сопряжения.
  et3dError60       = 60,  ///< Имя файла компонента сборки не определено.
  et3dError61       = 61,  ///< Нужно выполнить процесс по выделению объектов.
  et3dError62       = 62,  ///< Ошибка в определении массива объектов.
  et3dError63       = 63,  ///< Массив объектов не соответствует документу 3D-модели детали.
  et3dError64       = 64,  ///< Тип 3D объекта задан неверно.
  et3dError65       = 65,  ///< Ошибка при вставке 3D-модели детали.
  et3dError66       = 66,  ///< Нужно завершить режим разнесенного вида.
  et3dError67       = 67,  ///< Базовая операция может быть только одна.
  et3dError68       = 68,  ///< Для построения нужна базовая операция.
  et3dError69    = 69,  ///< Попытка изменить редактируемую деталь в процессе вставки детали в модель.
  et3dError70       = 70,  ///< Библиотека моделей не найдена.
  et3dError71       = 71,  ///< Библиотека моделей уже закрыта или не открывалась.
  et3dError72       = 72,  ///< Библиотека моделей уже открыта.
  et3dError73       = 73,  ///< Файл библиотеки моделей не найден.
  et3dError74       = 74,  ///< Ошибка в структуре файла библиотеки моделей.
  et3dError75       = 75,  ///< Ошибка в имени файла библиотеки моделей.
  et3dError76       = 76,  ///< Ошибка в имени моделей для библиотеки моделей.
  et3dError77       = 77,  ///< Доступ к модели в библиотеке моделей  невозможен.
  et3dError78       = 78,  ///< Ошибка! в выбранном направлении отсутствует поверхность.
  et3dError79       = 79,  ///< Ошибка! локальное тело поглощает результат.
  et3dError80       = 80,  ///< Ошибка! ломаная должна иметь не менее двух вершин.
  et3dError81       = 81,  ///< Ошибка! сплайн должен иметь не менее двух вершин.
  et3dError82       = 82,  ///< Ошибка в определении эскиза.
  et3dError83       = 83,  ///< Ошибка в определении ребра.
  et3dError84       = 84,  ///< Ошибка в определении вершины.
  et3dError85       = 85,  ///< Ошибка в определении планарной плоскости.
  et3dError86       = 86,  ///< Ошибка в определении поверхности.
  et3dError87       = 87,  ///< Ошибка создания файла библиотекаря моделей.
  et3dError88       = 88,  ///< Неподходящий тип объекта для проецирования.
  et3dError89       = 89,  ///< Вырожденная проекция объекта на плоскость эскиза.
  et3dError90       = 90,  ///< Некоторые ребра не спроецированы.
  et3dError91       = 91,  ///< Документ с таким именем уже открыт.
  et3dError92       = 92,  ///< Компонент не найден.
  et3dError93       = 93,  ///< Материал у компонента не найден.
  et3dError94       = 94,  ///< Попытка изменить деталь из библиотеки моделей или стандартную деталь.
  et3dError95       = 95,  ///< Компонент не является компонентом сборки.
  et3dError96       = 96,  ///< Недопустимая операция для компонента, редактируемого на месте.
  et3dError97       = 97,  ///< Цвет и оптические свойства объекта в сборке изменить нельзя.
  et3dError98       = 98,  ///< Импортированная поверхность задана неверно.
  et3dError99       = 99,  ///< Геометрия модели изменилась, данные могут быть не корректними.
  et3dError100      = 100,  ///< Ошибка при получении данных триангуляции.
  et3dError101      = 101,  ///< Ошибка при получении данных цилов.
  et3dError102      = 102,  ///< Невыбран ни один плоский объект.
  et3dError103      = 103,  ///< Ошибка при получении данных поверхности.
  et3dError104      = 104,  ///< Ошибка при получении данных 3d плоскости.
  et3dError105      = 105,  ///< Ошибка при получении данных конической поверхности.
  et3dError106      = 106,  ///< Ошибка при получении данных цилиндлической поверхности.
  et3dError107      = 107,  ///< Ошибка при получении данных сферы.
  et3dError108      = 108,  ///< Ошибка при получении данных тора.
  et3dError109      = 109,  ///< Ошибка при получении данных кривой.
  et3dError110      = 110,  ///< Ошибка при получении данных линии.
  et3dError111      = 111,  ///< Ошибка при получении данных окружности.
  et3dError112      = 112,  ///< Ошибка при получении данных эллипса.
  et3dError113      = 113,  ///< У 3d модели нет размеров листа.
  et3dError114      = 114,  ///< Переменная с таким именем уже имеет другой тип данных.
  et3dError115      = 115,  ///< Недопустимое имя переменной.
  et3dError116      = 116,  ///< Система не имеет решения.
  et3dError117      = 117,  ///< Переменная с таким именем уже существует.
  et3dError118      = 118,  ///< Для операции необходимо выбрать тело.
  et3dError119      = 119,  ///< Нарушена целостность тел.
  et3dError120      = 120,  ///< Способ определения длины сгиба отличается от заданного.
  et3dError121      = 121,  ///< Ошибка в указании прямолинейного объекта.
  et3dError122      = 122,  ///< Ошибка в указании плоской грани(массива граней).
  et3dError123      = 123,  ///< Объекты пересекаются.
  et3dError124      = 124,  ///< Неподходящий тип кривой.
  et3dError125      = 125,  ///< Преобразование текста выполнить невозможно.
  et3dError126      = 126,  ///< Контур не разбивает ни одну из граней или совпадает с кромкой грани.
  et3dError127      = 127,  ///< Для данной операции в эскизе должна быть только одна точка.
  et3dError128      = 128,  ///< Эскиз с одной точкой может использоваться только для крайнего сечения.
  et3dError129 = 129,  ///< Построение тонкой стенки невозможно, если одно из сечений представляет собой точку.
  et3dError130      = 130,  ///< Ошибочная топология.
  et3dError131      = 131,  ///< Нет обекта в прямом направлении.
  et3dError132      = 132,  ///< Нет обекта в обратном направлении.
  et3dError133      = 133,  ///< Тела изменены булевой операцией.
  et3dError134      = 134,  ///< Кривая содержит сегменты нулевой длины.
  et3dError135      = 135,  ///< Не найдены одна или несколько исходных операций.
  et3dError136      = 136,  ///< Контур состоит из 2 отрезков, проходящих по друг-другу.
  et3dError137      = 137,  ///< Избыточное количество переменных.
  et3dError138      = 138,  ///< Область определения не соответствует заданным значениям.
  et3dError139      = 139,  ///< Неизвестная ошибка при работе транслятора.
  et3dError140      = 140,  ///< Неизвестная ошибка при работе синтаксического анализатора.
  et3dError141      = 141,  ///< В строке присутствует неизвестный символ.
  et3dError142      = 142,  ///< Не хватает закрывающей скобки.
  et3dError143      = 143,  ///< Не хватает открывающей скобки.
  et3dError144      = 144,  ///< Невозможная операция.
  et3dError145      = 145,  ///< Операция потеряла опорные обьекты.
  et3dError146      = 146,  ///< Не все сгибы согнуты/разогнуты.
  et3dError147      = 147,  ///< Масштабирование с заданным коэффициентом невозможно.
  et3dError148      = 148,  ///< Масштабирование с заданным соотношением коэффициентов невозможно.
  et3dError149      = 149,  ///< Массив объектов для копирования пуст.
  et3dError150      = 150,  ///< Данная операция не применима к телам из частей.
  et3dError151      = 151,  ///< Результатом данной операции не может быть тело из частей.
  et3dError152      = 152,  ///< Перестало выполняться граничное условие сопряжения.
  et3dError153      = 153,  ///< Точки пересечения кривых не образуют регулярной сетки.
  et3dError154      = 154,  ///< Нельзя выполнить замыкание.
  et3dError155   = 155,  ///< Кривая, через которую происходит сопряжение, больше чем сама поверхность.
  et3dError156      = 156,  ///< Все кривые должны быть либо замкнуты, либо разомкнутуы.
  et3dError157 = 157,  ///< Эскиз должен располагаться только на внешней или внутренней плоской грани листового тела.
  et3dError158      = 158,  ///< Эскиз не удовлетворяет требованиям операции.
  et3dError159      = 159,  ///< Нарушена связность объектов.
  et3dError160     = 160,  ///< В точках пересечния кривых, кривые из противоположных семейств касаются.
  et3dError161      = 161,  ///< Нет контуров пересчения.
  et3dError162      = 162,  ///< Полный размер высоты должен быть больше толщины листового материала.
  et3dError163      = 163,  ///< Поверхность вырождена.
  et3dError164 = 164,  ///< Невозможно создать поверхность: нарушен порядок внутренних ребер разбиения.
  et3dError165      = 165,  ///< Величина удлинения слишком велика.
  et3dError166      = 166,  ///< Величина удлинения слишком мала.
  et3dError167      = 167,  ///< Не удалось продлить поверхность до данной вершины.
  et3dError168      = 168,  ///< Не удалось продлить поверхность до данной поверхности.
  et3dError169      = 169,  ///< Ребра не образуют связную цепочку.
  et3dError170      = 170,  ///< Большое количество точек. Уменьшите количество.
  et3dError171      = 171,  ///< Слишком большое количество точек.
  et3dError172      = 172,  ///< Не удалось продлить поверхность в данном направлении.
  et3dError173 = 173,  ///< Грань содержит полюс: укажите другую кромку или выберите другой тип продления.
  et3dError174      = 174,  ///< Контуры должны быть либо все замкнуты, либо все разомкнуты.
  et3dError175      = 175,  ///< Слишком сложный набор элементов для обработки.
  et3dError176      = 176,  ///< Оси не пересекаются.
  et3dError177      = 177,  ///< Объекты слишком далеко.
  et3dError179      = 179,  ///< Контур невозможно использовать для заданного перемещения.
  et3dError180      = 180,  ///< Один из контуров невозможно использовать для заданного построения.
  et3dError181      = 181,  ///< Линии разъема созданы не на всех выбранных гранях.
  et3dError182      = 182,  ///< В некоторых точках образующая параллельна направляющей.
  et3dError183      = 183,  ///< Недостаточно памяти.
  et3dError184 = 184,  ///< Направление боковой границы параллельно касательной на конце образующей кривой.
  et3dError185      = 185,  ///< Объект не найден.
  et3dError186 = 186,  ///< В сплайновой поверхности часть точек из полюса передвинута, часть осталась совпадающей.
  et3dError187      = 187,  ///< Аппроксимация не выполнена.
  et3dError188      = 188,  ///< Не выполнены условия по точности построения.
  et3dError189      = 189,  ///< Ошибочное значение переменной.
  et3dError190      = 190,  ///< Невозможно построить фаску на указанных ребрах.
  et3dError191      = 191,  ///< Остановка скругления невозможна, скругление выполнено без остановки.
  et3dError192      = 192,  ///< Не согласованы сопряжения на смежных границах.
  et3dError193      = 193,  ///< Доступ к объекту запрещен.
  et3dError194      = 194,  ///< Количество сегментов слишком велико.
  et3dError195      = 195,  ///< Недопустимое положение зазора обечайки.
  et3dError196      = 196,  ///< Силуэтная грани линия не разрезает грань.
  et3dError197      = 197,  ///< Вырожденная проекция опорного объекта.
  et3dError198      = 198,  ///< Использованы не все контура (кривые).
  et3dError199      = 199,  ///< Параметр операции был изменен.
  et3dError200      = 200,  ///< Использованы не все объекты.
  et3dError201      = 201,  ///< Ошибка из-за образования перемычки нулевой толщины.
  et3dError202      = 202,  ///< Ошибка при создании скругления грани.
  et3dError301 = 301,  ///< Отсутствует непрерывность производной кривой по параметру.
  et3dError302 = 302,  ///< Отсутствует непрерывность производной поверхности по первому параметру.
  et3dError303 = 303,  ///< Отсутствует непрерывность производной поверхности по второму параметру.
  et3dError304 = 304,  ///< В контуре есть разрывы между сегментами.
  et3dError305 = 305,  ///< В контуре есть наложения сегментов.
  et3dError306 = 306,  ///< Удлинение не может быть ограничено заданной поверхностью.
  et3dError307 = 307,  ///< Ошибка построения листового тела по произвольному телу.
  et3dError308 = 308,  ///< Ребро не может быть использовано как ребро сгиба.
  et3dError309 = 309,  ///< Ошибочное положение инструмента относительно листового тела.
  et3dError501 = 501,  ///< Некорректные данные.
  et3dError502 = 502,  ///< Некорректные формы ломаных / направления касательных.
  et3dError503 = 503,  ///< Некорректная структура ломаной с прямолинейными участками.
  et3dError504 = 504,  ///< Слишком мало точек.
  et3dError505 = 505,  ///< Совпадение точек.
  et3dError506 = 506,  ///< Слишком острый угол между сегментами ломаной.
  et3dError507 = 507,  ///< Обратный ход сегмента.
  et3dError508 = 508,  ///< Резкое кручение ломаной.
  et3dError509 = 509,  ///< Некорректное направление касательной в начальной точке.
  et3dError510 = 510,  ///< Некорректное направление касательной в конечной точке.
  et3dError511 = 511,  ///< Первая касательная задана к прямолинейному участку.
  et3dError512 = 512,  ///< Последняя касательная задана к прямолинейному участку.
  et3dError513 = 513,  ///< Касательные векторы не корректны для локально-выпуклого участка.
  et3dError514 = 514,  ///< Некорректная структура исходной кривой Безье.
  et3dError515 = 515,  ///< Нет пересечения касательных. Некорректная структура ломаной.
  et3dError516 = 516,  ///< Критическая конфигурация для B-сплайновой аппроксимации.
  et3dError517 = 517,  ///< Некорректные исходные данные.
  et3dError518 = 518,  ///< Данная команда не реализована.
  et3dError519 = 519,  ///< Недостаточно памяти.
  et3dError520 = 520,  ///< Некорректное направление первой касательной.
  et3dError521 = 521,  ///< Некорректное направление последней касательной.
  et3dError522 = 522,  ///< Конечный прямолинейный участок. Касательный вектор не нужен.
  et3dError523 = 523,  ///< Некорректная структура ломаной с прямолинейными участками.
  et3dError524 = 524,  ///< Некорректная структура данных в модели.
  et3dError525 = 525,  ///< Объект - не пространственная ломаная.
  et3dError526 = 526,  ///< Отсутствует вектор узлов.
  et3dError527 = 527,  ///< Замкнутый сплайн во внешнем файле.
  et3dError528 = 528,  ///< Не выбран нужный объект.
  et3dError529 = 529,  ///< Резкое изменение кривизны на участке перегиба.
  et3dError531 = 531,  ///< Слишком мало точек на выпуклом участке начального участка.
  et3dError532 = 532,  ///< Запрет на замкнутую конфигурацию при количестве точек.
  et3dError533 = 533,  ///< Некорректная структура исходного геометрического определителя.
  et3dError534 = 534,  ///< Размеры массивов точек.
  et3dError535 = 535,  ///< Касательные не пересекаются.
  et3dError536 = 536,  ///< Точки совпадают.
  et3dError537 = 537,  ///< Мало точек для замкнутой ломаной.
  et3dError538 = 538,  ///< Слишком мало точек на выпуклом участке.
  et3dError539 = 539,  ///< Точки на прямой.
  et3dError540 = 540,  ///< Слишком много точек.
  et3dError541 = 541,  ///< Трехсегментный участок не выпуклый.
  et3dError542 = 542,  ///< Кривизна за пределами допустимого диапазона.
  et3dError543 = 543,  ///< Объект не ГО Эрмита.
  et3dError544 = 544,  ///< Объект не NURBS.
  et3dError545 = 545,  ///< Ошибка обеспечения непрерывности производной.
  et3dError546 = 546,  ///< Недостаточно данных для построения.
  et3dError601 = 601,  ///< Отсутствуют рёбра для построения.
  et3dError602 = 602,  ///< Отсутствуют кривые для построения.
  et3dError603 = 603,  ///< Некорректные данные.
  et3dError604 = 604,  ///< Не хватает данных для построения.
  et3dError605 = 605,  ///< Ошибочная опорная кривая.
  et3dError606 = 606,  ///< Ошибочная направляющая кривая.
  et3dError607 = 607,  ///< Ошибочная вершинная кривая.
  et3dError608 = 608,  ///< Ошибочная дискриминантная функция.
  et3dError609 = 609,  ///< Ошибочная дискриминантная кривая.
  et3dError610 = 610,  ///< Ошибочная дискриминантная поверхность.
  et3dError611 = 611,  ///< Ошибочная функция угла.
  et3dError612 = 612,  ///< Опорную кривую не удалось построить.
  et3dError613 = 613,  ///< Направляющую кривую не удалось построить.
  et3dError614 = 614,  ///< Вершинную кривую не удалось построить.
  et3dError615 = 615,  ///< Контрольную кривую не удалось построить.
  et3dError616 = 616,  ///< Вершинную кривую и дискриминант не удалось построить.
  et3dError617 = 617,  ///< Дискриминантную функцию не удалось построить.
  et3dError618 = 618,  ///< Ошибочная образующая кривая.
  et3dError619 = 619,  ///< Не удалось синхронизировать параметры.
  et3dError620 = 620,  ///< Не удалось выполнить репараметризацию.
  et3dError621 = 621,  ///< Треугольник сечения поверхности не может быть определен.
  et3dError622 = 622,  ///< Функция дискриминанта для задания формы сечения не обеспечивает построение поверхности.
  et3dError623 = 623,  ///< Кривая для задания формы сечения не обеспечивает построение поверхности.
  et3dError624 = 624,  ///< Касательная поверхность для задания формы сечения не обеспечивает построение поверхности.
  et3dError625 = 625,  ///< Движение сечения не совместимо с направляющими.
  et3dError626 = 626,  ///< Дискриминантная поверхность далеко от сечения.
  et3dError627 = 627   ///< Нарушен порядок взаимного пересечения кривых.
};


/// Типы направлений.
enum ksDirectionTypeEnum : int
{
  dtNormal      = 0,  ///< Прямое направление.
  dtReverse     = 1,  ///< Обратное направление.
  dtBoth        = 2,  ///< В обе стороны.
  dtMiddlePlane = 3   ///< Средняя плоскость.
};


/// Типы направлений.


/// Типы операций.
enum ksEndTypeEnum : int
{
  etBlind           = 0,  ///< Строго на глубину.
  etThroughAll      = 1,  ///< Насквозь всей детали.
  etUpToVertexTo    = 2,  ///< До вершины до.
  etUpToVertexFrom  = 3,  ///< До вершины за.
  etUpToSurfaceTo   = 4,  ///< До грани до.
  etUpToSurfaceFrom = 5,  ///< До грани за.
  etUpToNearSurface = 6   ///< До ближайшей грани.
};


/// Типы операций.


/// Тип компонента.
enum Part_Type : int
{
  pInPlace_Part  = -4,  ///< Компонент, редактируемый на месте.
  pNew_Part      = -3,  ///< Новый компонент.
  pEdit_Part     = -2,  ///< Редактируемый компонент.
  pTop_Part      = -1   ///< Верхний компонент.
};


/// Типы сопряжений.
enum MateConstraintType : int
{
  mc_Unknown       = -1,  ///< Совпадение/принадлежность объектов.
  mc_Coincidence   = 0,  ///< Совпадение/принадлежность объектов.
  mc_Parallel      = 1,  ///< Параллельность.
  mc_Perpendicular = 2,  ///< Перпендикулярность.
  mc_Tangency      = 3,  ///< Касательность.
  mc_Concentric    = 4,  ///< Концентричность.
  mc_Distance      = 5,  ///< Расстояние между объектами.
  mc_Angle         = 6,  ///< Угол между объектами.
  mc_InPlace       = 7,  ///< Точное совпадение двух плоскостей.
  mc_Transmission  = 9,  ///< Механическая передача.
  mc_CamGear       = 10,  ///< Кулачковый механизм. Кулачек-толкатель.
  mc_Symmetric     = 11,  ///< Симметрия.
  mc_Dependent     = 14   ///< Зависимое положение.
};


/// Режим визуализации модели.
enum ViewMode : int
{
  vm_Wireframe     = 0,  ///< Каркас.
  vm_HiddenRemoved = 1,  ///< Удаление невидимых линий.
  vm_HiddenThin    = 2,  ///< Невидимые линии тонкие.
  vm_Shaded        = 3   ///< Полутоновой.
};


/// Определения для конвертации в дополнительные форматы jgs, sat, xt, step, stl, VRML, JT.
enum D3FormatConvType : int
{
  load_format_SAT   = -1,  ///< Формат SAT.  Для открытия документов.
  load_format_XT    = -2,  ///< Формат XT.   Для открытия документов.
  load_format_STEP  = -3,  ///< Формат STEP. Для открытия документов.
  load_format_IGES  = -4,  ///< Формат IGES. Для открытия документов.
  load_format_STL   = -6,  ///< Формат STL.  Для открытия документов.
  load_format_C3D   = -7,  ///< Формат C3D.  Для открытия документов.
  load_format_JT    = -8,  ///< Формат JT.   Для открытия документов.
  load_format_OBJ   = -9,  ///< Формат OBJ.  Для открытия документов.
  format_Unknown = 0,  ///< Неопределенный формат.
  format_SAT   = 1,  ///< Формат SAT.
  format_XT    = 2,  ///< Формат XT.
  format_STEP  = 3,  ///< Формат STEP.
  format_IGES  = 4,  ///< Формат IGES.
  format_VRML  = 5,  ///< Формат VRML.
  format_STL   = 6,  ///< Формат STL.
  format_C3D   = 7,  ///< Формат C3D.
  format_JT    = 8,  ///< Формат JT.
  load_format_NX     = -100,  ///< Формат NX. Для открытия документов.
  load_format_CREO   = -101,  ///< Формат CREO. Для открытия документов.
  load_format_SW     = -102,  ///< Формат SolidWorks. Для открытия документов.
  load_format_INV    = -103,  ///< Формат Inventor. Для открытия документов.
  load_format_CATIA  = -104,  ///< Формат Catia. Для открытия документов
  load_format_SE     = -105,  ///< Формат SolidEdge. Для открытия документов
  load_format_3DXML = -106,  ///< Формат 3DXML. Для открытия документов.
  format_STEP_AP203  = 203,  ///< Формат STEP AP203. Прикладной протокол 203 ( Проектирование с управляемой конфигурацией )
  format_STEP_AP214  = 214,  ///< Формат STEP AP214. Прикладной протокол 214 ( Проектирование автомобилей ).
  format_STEP_AP242  = 242   ///< Формат STEP AP242. Прикладной протокол 242 ( Проектирование автомобилей ).
};


/// Типы используемого цвета.
enum ksUseColorEnum : int
{
  useColorUnknown = -1,  ///< Тип не определен.
  useColorOur     = 0,  ///< Собственный цвет.
  useColorOwner   = 1,  ///< Цвет хозяина.
  useColorSource  = 2,  ///< Цвет источника.
  useColorLayer   = 3   ///< Цвет слоя.
};


/// Типы используемого цвета.


/// Тип перемещения.
enum Positioner_Type : int
{
  pnMove     = 0,  ///< Сдвиг.
  pnRotate   = 1   ///< Вращение.
};


/// Типы пересечений.
enum Intersection_Type : int
{
  itTangentPoint   = 1,  ///< Пересечение точкой.
  itTangentCurve   = 2,  ///< Пересечение вдоль касательной линии.
  itTangentSurface = 3,  ///< Пересечение касательной областью поверхности.
  itBody           = 4   ///< Пересечение образует тело.
};


/// Типы математических объектов учавствующих в сопряжении.
enum ksMateType : int
{
  ksMateUnknown  = 0,  ///< Неизвестный объект.
  ksMatePoint    = 1,  ///< Точка.
  ksMateLine     = 2,  ///< Линия.
  ksMatePlane    = 3,  ///< Плоскость.
  ksMateCylinder = 4,  ///< Цилиндр.
  ksMateCone     = 5,  ///< Конус.
  ksMateSphere   = 6,  ///< Сфера.
  ksMateTorus    = 7,  ///< Тор.
  ksMateCircle   = 8   ///< Окружность
};


/// Способ построения сегмента ломоной.
enum ksLineBuildingType : int
{
  ksLBTByPoint         = 0,  ///< По точкам.
  ksLBTXDirection      = 1,  ///< По оси X.
  ksLBTYDirection      = 2,  ///< По оси Y.
  ksLBTZDirection      = 3,  ///< По оси Z.
  ksLBTParallel        = 4,  ///< Параллельно объекту.
  ksLBTPerpendicular   = 5,  ///< Перпендикулярно объекту.
  ksLBTByPoint3DParams = 6   ///< Через построение точки.
};


/// Тип коллекции компанентов.
enum ksPart7CollectionTypeEnum : int
{
  ksAllParts     = 0,  ///< Все компоненты (включая копии из операций копирования).
  ksUniqueParts  = 1   ///< Первые экземпляры вставок компонентов.
};


/// Способ определения длины развертки
enum ksUnfoldTypeEnum : int
{
  ksCoefficient  = 0,  ///< Коэффициент нейтрального слоя.
  ksValueBend    = 1,  ///< Величина сгиба
  ksDecreaseBend = 2,  ///< Уменьшение сгиба.
  ksTableBends   = 3   ///< Таблица сгибов.
};


/// Тип размещения сгиба на ребре.
enum ksBendDisposalEnum : int
{
  ksBendDisposalAllLength     = 0,  ///< По всей длине.
  ksBendDisposalCentre        = 1,  ///< По центру.
  ksBendDisposalLeft          = 2,  ///< Отступ слева.
  ksBendDisposalRight         = 3,  ///< Отступ справа.
  ksBendDisposalTwo           = 4,  ///< Два отступа.
  ksBendDisposalLeftAndWidth  = 5,  ///< Отступ слева и по ширине.
  ksBendDisposalRightAndWidth = 6   ///< Отступ справа и по ширине.
};


/// Тип определения длины.
enum ksBendLengthTypeEnum : int
{
  ksBendLengthByContinue           = 0,  ///< По продолжению.
  ksBendLengthByContour            = 1,  ///< По контуру.
  ksBendLengthByTouch              = 2,  ///< По касанию.
  ksBendLengthByContourInternal    = 3,  ///< По контуру внутри.
  ksBendLengthByTangentInternal    = 4   ///< По касанию внутри.
};


/// Тип смещения.
enum ksBendOffsetTypeEnum : int
{
  ksBendOffsetIn          = 0,  ///< Смещение внутрь.
  ksBendOffsetOut         = 1,  ///< Смещение наружу.
  ksBendOffsetLineOutside = 2,  ///< По внешней линии контура.
  ksBendOffsetLineInside  = 3,  ///< По внутренней линии контура.
  ksBendOffsetByTouch     = 4,  ///< По касанию к сгибу.
  ksBendOffsetByCentre    = 5   ///< По центру.
};


/// Тип построения боковой стороны сгиба.
enum ksBendSideTypeEnum : int
{
  ksBendSideByAngle    = 0,  ///< По уклону и углу.
  ksBendSideByWidening = 1   ///< По расширению.
};


/// Тип освобождения cгиба.
enum ksBendReleaseTypeEnum : int
{
  ksBendReleaseByRect   = 0,  ///< Прямоугольное.
  ksBendReleaseByCircle = 1   ///< Скругленное.
};


/// Способ освобождения угла сгиба.
enum ksBendAngleReleaseTypeEnum : int
{
  ksBendAngleBendOnly = 0,  ///< Только сгиб.
  ksBendAngleIn       = 1,  ///< Сгиб и продолженипе.
  ksBendAngleAllBends = 2   ///< Все сгибы.
};


/// Способ сгиба.
enum ksBendTypeEnum : int
{
  ksLineBend        = 0,  ///< По линии сгиба.
  ksBendLineOutside = 1,  ///< Линия сгиба снаружи.
  ksBendLineInside  = 2,  ///< Линия сгиба внутри.
  ksBendByTouch     = 3,  ///< По касанию.
  ksBendByCentre    = 4   ///< По центру.
};


/// Тип построения отверстия и выреза.
enum ksHoleCutTypeEnum : int
{
  ksHoleCutByWidth     = 0,  ///< По толщине.
  ksHoleCutByDepth     = 1,  ///< На глубину.
  ksHoleCutUpToSurface = 2   ///< До грани.
};


/// Типы действий над телами.
enum ksChooseBodiesType : int
{
  ksNewBody               = 0,  ///< Новое тело.
  ksAutomaticDefinition   = 1,  ///< Автоопределение.
  ksManualEditing         = 2,  ///< Ручное редактирование.
  ksAllBodies             = 3   ///< Все тела.
};


/// Область применения. Объекты.
enum ksChoosePartsType : int
{
  ksChAutomaticDefinition  = 1,  ///< Автоопределение.
  ksChManualEditing        = 2,  ///< Ручное редактирование.
  ksChAllParts             = 3,  ///< Все объекты.
  ksChNoLibraryParts       = 4   ///< Все объекты кроме библиотечных.
};


/// Область применения. Группы объектов.
enum ksChooseType : int
{
  ksChBodiesAndParts = 1,  ///< Компоненты и тела.
  ksChParts          = 2,  ///< Компоненты.
  ksChBodies         = 3   ///< Все компоненты.
};


/// Способы построения пространственной точки.
enum ksPoint3DTypeEnum : int
{
  ksPUnknown    = 0,  ///< Неизвестный тип.
  ksPParamCoord = 1,  ///< По координатам от опорного объекта.
  ksPDisplace   = 2,  ///< По смещению от опорного объекта.
  ksPIntersect  = 3,  ///< На пересечении опорных объектов.
  ksPCenter     = 4,  ///< В центре опорного объекта.
  ksPCurve      = 5,  ///< На кривой со смещением.
  ksPSurface    = 6,  ///< На поверхности.
  ksPProjection = 7,  ///< Проецированием.
  ksPCylindrCoord = 8,  ///< Цилиндрические координаты.
  ksPSphericCoord = 9,  ///< Сферические координаты.
  ksPBetweenPoints = 10   ///< Между точками.
};


/// Типы смещений при способе построения точки вдоль кривой.
enum ksPoint3DCurveParamTypeEnum : int
{
  ksOffsetByU      = 1,  ///< По параметру U, %.
  ksOffsetByLen    = 2,  ///< По длине дуги.
  ksOffsetByAngle  = 3   ///< По центральному углу дуги.
};


/// Типы смещений при способе построения точки на поверхности.
enum ksPoint3DSurfaceParamTypeEnum : int
{
  ksOffsetByUV             = 1,  ///< По параметрам U и V, %.
  ksOffsetByLenFromObj     = 2,  ///< По расстояниям от плоских объектов.
  ksOffsetByCoords         = 3,  ///< По координатам на плоскости.
  ksOffsetByCylinderCoords = 4,  ///< Смещение по целиндрическим координатам.
  ksOffsetBySphereCoords   = 5   ///< Смещение по сферическим координатам.
};


/// Типы смещений при способе построения точки на поверхности.
enum ksMeasureResultEnum : int
{
  ksMResUnknown           = 0,  ///< Не определен
  ksMResAxisAxisCoaxial   = 1,  ///< Оси совпадают.
  ksMResAxisAxisParallel  = 2,  ///< Оси параллельны.
  ksMResAxisAxisIntersect = 3,  ///< Оси пересекаются.
  ksMResAxisAxisDistant   = 4,  ///< Оси на расстоянии.
  ksMResAxisSurfColinear  = 5,  ///< Ось лежит на поверхности.
  ksMResAxisSurfParallel  = 6,  ///< Ось параллельна поверхности.
  ksMResAxisSurfIntersect = 7,  ///< Ось пересекает поверхность.
  ksMResAxisSurfDistant   = 8,  ///< Ось на расстоянии от поверхности.
  ksMResSurfSurfColinear  = 9,  ///< Одна поверхность лежит на другой.
  ksMResSurfSurfParallel  = 10,  ///< Поверхности параллельны.
  ksMResSurfSurfIntersecting = 11   ///< Поверхности пересекаются.
};


/// Тип ориентирования ЛСК.
enum ksOrientationTypeEnum : int
{
  ksAxisOrientation  = 0,  ///< Направление осей.
  ksEulerCorners     = 1,  ///< Система углов Эйлера.
  ksOrientByObject   = 2   ///< Ориентирование по объекту.
};


/// Тип параметров объекта.
enum ksModelObjectParamTypeEnum : int
{
  ksMOAllParam            = 1,  ///< Параметры в системе координат ЛСК объекта.
  ksMOPartAllParam        = 2,  ///< Параметры в системе координат детали.
  ksMOCurrentLSKAllParam  = 3   ///< Параметры в системе текущей ЛСК.
};


/// Стили 3D линий для отрисовки с помощью OpenGL.
enum ks3DLineStyle : int
{
  ksCS3DNoDrawing         = 0,  ///< Линия не отрисовывается.
  ksCS3DSolid             = 1,  ///< Сплошная линия.
  ksCS3DDashed            = 2,  ///< Штриховая линия.
  ksCS3DDotted            = 3,  ///< Пунктирная линия.
  ksCS3DDashDot           = 4,  ///< Штрихпунктирная линия.
  ksCS3DDashDotLDash2Dots = 5   ///< Штрихпунктирная линия (штрих и 2 точки).
};


/// Тип загрузки компонента.
enum ksLoadStateEnum : int
{
  ksLUnknown    = -1,  ///< Неопределен.
  ksLCompletely = 0,  ///< Загружен полностью.
  ksLUnload     = 1,  ///< Пустой. Незагружен.
  ksLTriangles  = 2,  ///< Упрощенный. Триангуляция.
  ksLPartially  = 3,  ///< Частичная загрузка
  ksLGabarit    = 4   ///< Габарит.
};


/// Режим фильтрации отображаемых граней внешнего объекта.
enum ksFacetCullingMode : int
{
  ksFSMNone  = 0,  ///< Отображаем всё (не фильтруем).
  ksFSMFront = 1,  ///< Отбрасывается передняя грань.
  ksFSMBack  = 2,  ///< Отбрасывается задняя грань.
  ksFSMAll   = 3   ///< Ничего не отображаем.
};


/// Обход углов эквидистанты 3D.
enum ksEquidistant3DCutModeEnum : int
{
  ksECMUnknown = 0,  ///< Не определен.
  ksECMLineSeg = 1,  ///< Обход срезом.
  ksECMCircle  = 2   ///< Обход дугой.
};


/// Способ задания базовой точки.
enum ksPatternBasePointTypeEnum : int
{
  ksCRAuto        = 0,  ///< Автоопределение.
  ksCRManual      = 1,  ///< Ручное указание.
  ksCRFirstObject = 2   ///< По первому в списке.
};


/// Тип продления поверхности
enum ksExtensionSurfaceTypeEnum : int
{
  ksESTUnknown   = -1,  ///< Неизвестный.
  ksESTSelf      =  0,  ///< Той же поверхностью.
  ksESTTangent   =  1,  ///< По касательной.
  ksESTDirection =  2   ///< По направлению.
};


/// Способ ограничения
enum ksExtensionLimitTypeEnum : int
{
  ksETLUnknown = -1,  ///< Неизвестный.
  ksETLength   =  0,  ///< На заданную длину.
  ksETLVertex  =  1  ///< До вершины.
};


/// Типы параметров вектора.
enum ksVector3DParametersTypeEnum : int
{
  ksVector3DUnknown      = 0,  ///< Не определен
  ksVector3D2Vertex      = 1,  ///< По двум вершинам.
  ksVector3DCSAngle      = 2,  ///< Угол в плоскости СК (Плоскости XY YZ XZ).
  ksVector3DAxis         = 3,  ///< По оси СК.
  ksVector3DCoefficients = 4,  ///< По коэффициентам.
  ksVector3D2Angles      = 5,  ///< По двум углам.
  ksVector3DEdge         = 6,  ///< По прямолинейному ребру, оси или перпендикулярно плоскости кривой.
  ksVector3DPlane        = 7,  ///< По оси цилиндра или перпендикулярно плоской грани, плоскости.
  ksVector3DSurface      = 8,  ///< Перпендикулярно грани в указанной точке.
  ksVector3DCurve        = 9,  ///< По базисному вектору в точке кривой (кроме прямолинейных объектов).
  ksVector3DScreen       = 10   ///< Перпендикулярно плоскости экрана
};


/// Типы базисного вектора.
enum ksBasisVectorTypeEnum : int
{
  ksTangentVector    = 0,  ///< Касательный вектор
  ksNormalVector     = 1,  ///< Вектор главной нормали.
  ksBinormalVector   = 2   ///< Вектор бинормали.
};


/// Тип соединения кривых.
enum ksConnectTypeEnum : int
{
  ksCTUnknown   = -1,  ///< Неизвестный.
  ksCTPosition  =  0,  ///< Соединение по позиции.
  ksCTTangent   =  1,  ///< Соединение по касательной.
  ksCTNormal    =  2,  ///< Соединение перпендикулярно.
  ksCTSmooth    =  3   ///< Гладкое соединение.
};


/// Способ создания 3D дуги.
enum ksArc3DBuildingTypeEnum : int
{
  ksArc3DByPoints     =  0,  ///< По трем точкам.
  ksArc3DByCentre     =  1,  ///< По центру, углам и плоскости.
  ksArc3DByDirrection =  2,  ///< По двум точкам и направлению.
  ksArc3DByTanCurve   =  3   ///< Касательно к кривой.
};


/// Индекс параметра 3D дуги.
enum ksArc3DParameterEnum : int
{
  ksArc3DCenter  =  0,  ///< Точка центра.
  ksArc3DPoint1  =  1,  ///< Точка 1.
  ksArc3DPoint2  =  2,  ///< Точка 2.
  ksArc3DPoint3  =  3,  ///< Точка 3.
  ksArc3DAngle1  =  1,  ///< Угол 1.
  ksArc3DAngle2  =  2,  ///< Угол 2.
  ksArc3DRadius  =  3   ///< Радиус.
};


/// Способ построения угла вращения..
enum ksRotatedTypeEnum : int
{
  ksRTAngle    =  0,  ///< Угол.
  ksRTVertex   =  1,  ///< До вершины.
  ksRTSurface  =  2   ///< До поверхности.
};


/// Способ построения массива по сетке.
enum ksLinearPatternBuildingTypeEnum : int
{
  ksLPSaveAll            =  0,  ///< Оставлять копии внутри сетки.
  ksLPSaveAlongPerimeter =  1,  ///< Оставлять копии только по периметру сетки.
  ksLPSaveAlongAxially   =  2,  ///< Оставлять копии только по осям сетки.
  ksLPChessOrderByAxis1  =  3,  ///< Шахматный порядок - сдвиг вдоль первой оси.
  ksLPChessOrderByAxis2  =  4   ///< Шахматный порядок - сдвиг вдоль второй оси.
};


/// Тип доступа
enum ksPartAccessTypeEnum : int
{
  ksATUncertainty  =  -1,  ///< Неопределенный.
  ksATEditable     =  0,  ///< Редактирование.
  ksATReadOnly     =  1,  ///< Только чтение.
  ksATDisable      =  2   ///< Доступ запрещен.
};


/// Способ построения массива по сетке.
enum ksMeshPointsSurfaceBuildingTypeEnum : int
{
  ksMPByPoints =  0,  ///< Сплайновая поверхность по точкам.
  ksMPByPole   =  1   ///< Сплайновая поверхность по полюсам.
};


/// Способ построения массива по сетке.
enum ksCloudPointsSurfaceBuildingTypeEnum : int
{
  ksCLByPoints   =  0,  ///< Сплайновая поверхность по точкам.
  ksCLByPole     =  1,  ///< Сплайновая поверхность по полюсам.
  ksCLPolyhedral =  2   ///< Многогранная поверхность.
};


/// Способ распознования сети точек.
enum ksCloudTypeEnum : int
{
  ksCLAuto    = 0,  ///< Автоматически.
  ksCLLocalCS = 1,  ///< В плоскости CK.
  ksCLScreen  = 2   ///< В плоскости экрана.
};


/// Способ фильтрации 3D объектов.
enum ksObjectsFilter3DEnum : int
{
  ksFilterAll          = 0,  ///< Фильтровать все.
  ksFilterFaces        = 1,  ///< Фильтровать грани.
  ksFilterEdges        = 2,  ///< Фильтровать ребра.
  ksFilterVertexs      = 3,  ///< Фильтровать вершины.
  ksFilterCPlanes      = 4,  ///< Фильтровать конструктивные плоскасти.
  ksFilterCAxis        = 5,  ///< Фильтровать конструктивные оси.
  ksFilterParts        = 6,  ///< Фильтровать компоненты.
  ksFilterBodies       = 7,  ///< Фильтровать тела.
  ksFilterSurfaces     = 8,  ///< Фильтровать поверхности.
  ksFilterSketches     = 9,  ///< Фильтровать эскизы.
  ksFilterCurves       = 10,  ///< Фильтровать кривые.
  ksFilterCS           = 11,  ///< Фильтровать системы координат.
  ksFilterControlPoints = 12,  ///< Фильтровать контрольные и присоединительные точки.
  ksFilterPoints3D     = 13,  ///< Фильтровать точки.
  ksFilterDesignations = 14,  ///< Фильтровать обозначения.
  ksFilterThread       = 15   ///< Фильтровать условные обозначения резьбы.
};


/// Порядок законов
enum ksCoordLawEnum : int
{
  ksCLawX  = 0,  ///< Закон X.
  ksCLawY  = 1,  ///< Закон Y.
  ksCLawZ  = 2   ///< Закон Z.
};


/// Типы законов.
enum ksLawTypeEnum : int
{
  ksTLawConst        = 0,  ///< Константный.
  ksTLawLinear       = 1,  ///< Линейный.
  ksTLawCube         = 2,  ///< Кубический.
  ksTLawByExpression = 3   ///< По выражению.
};


/// Способ построения массива по концентрической сетке.
enum ksCircularPatternBuildingTypeEnum : int
{
  ksCPSaveAll            =  0,  ///< Стандартная схема.
  ksCPChessOrderByAxis1  =  1,  ///< Шахматный порядок - сдвиг вдоль первой оси (концентрическое направление).
  ksCPChessOrderByAxis2  =  2   ///< Шахматный порядок - сдвиг вдоль второй оси (радиальное направление).
};


/// Тип направления касательной.
enum ksSplineTangentEnum : int
{
  ksSTNone         = 0,  ///< Не задано.
  ksSTByDirection  = 1,  ///< По направлению.
  ksSTCurveU       = 2,  ///< К изопараметрической кривой по направлению U.
  ksSTCurveV       = 3,  ///< К изопараметрической кривой по направлению V.
  ksSTSurfaceCurve = 4   ///< К кривой на поверхности.
};


/// Тип проекции кривой.
enum ksCurveProjectionTypeEnum : int
{
  ksCPNearest            = 0,  ///< Ближайшая проекция.
  ksCPNearestByDirection = 1   ///< По направлению.
};


/// Тип контура.
enum ksContour3DTypeEnum : int
{
  ksCTAuto    = 0,  ///< Автоопределение типа.
  ksCTSpace   = 1,  ///< Произвольный контур.
  ksCTSurface = 2,  ///< Контур на грани.
  ksCTSketch  = 3   ///< Контур эскиза.
};


/// Тип построения отрезка 3D.
enum ksLineSegment3DTypeEnum : int
{
  ksLSTTwoPoints        = 0,  ///< По 2 точкам.
  ksLSTPointLenghtAngle = 1   ///< По точке, длине и углу наклона.
};


/// Способ построение присоединительной точки.
enum ksConjunctivePointTypeEnum : int
{
  ksCPByObject        = 0,  ///< По объекту.
  ksCPManualDirection = 1   ///< Ручное задание направление осей.
};


/// Способ построения Контура 3D.
enum ksContour3DBuildingTypeTypeEnum : int
{
  ksCBTUnknown = 0,  ///< Не определен.
  ksCBTEdges = 1,  ///< Ребрами.
  ksCBTEquidistant  = 2   ///< Эквидистанта.
};


/// Тип родственных отношений.
enum ksRelationTypeEnum : int
{
  ksRTUnknown     = 0,  ///< Не определен.
  ksRTIndifferent = 1,  ///< Все отношения.
  ksRTStrong      = 2   ///< Сильные отношениЯ.
};


/// Способ задания высоты спирали 3D.
enum ksSpiral3DHeightTypeEnum : int
{
  ksSHTByValue   = 0,  ///< По заданному значению высоты.
  ksSHTByObject  = 1,  ///< По объекту.
  ksSHTByCurve   = 2   ///< По длине плоской кривой.
};


/// Способ построения спирали 3D.
enum ksSpline3DBuildingTypeEnum : int
{
  ksSBTByStepAndTurnCount   = 0,  ///< По шагу и количеству витков.
  ksSBTByStepAndHeight      = 1,  ///< По шагу и высоте.
  ksSBTByTurnCountAndHeight = 2   ///< По количеству витков и высоте.
};


/// Способ задания диаметра спирали 3D.
enum ksSpline3DDiameterTypeEnum : int
{
  ksSDTByValue               = 0,  ///< По заданному значению диаметра.
  ksSDTByObject              = 1,  ///< По объекту.
  ksSDTByGeneratrixTiltAngle = 2   ///< По углу наклона образующей.
};


/// Способ построения точек группы.
enum ksPointsArrOnCurveTypeEnum : int
{
  ksPAOCByPointsCount    = 0,  ///< Равномерно по длине (Построение по заданному количеству точек).
  ksPAOCByStep           = 1,  ///< Шаг по кривой (Построение по расстоянию между точками).
  ksPAOCByParametricStep = 2   ///< Равномерный шаг по параметру кривой (Построение по параметрическому рассоянию между точками).
};


/// Способ построения точек группы.
enum ksPointsArrOnSurfaceTypeEnum : int
{
  ksPAOSByPointsUVCount     = -1,  ///< По количеству точек по U и V.
  ksPAOSByLinearDeflection  = 0,  ///< По линейному отклонению.
  ksPAOSByAngularDeflection = 1,  ///< По угловому отклонению.
  ksPAOSByMeshAroundPoint   = 2   ///< По сетке вокруг заданной точки.
};


/// Тип сетки построенной вокруг точки.
enum ksMeshAroundPointTypeEnum : int
{
  ksMALinear         = 0,  ///< Прямоугольная сетка (метрический шаг).
  ksMAUVLinear       = 1,  ///< Прямоугольная сетка (параметрический шаг).
  ksMACircular       = 2,  ///< Концентрическая сетка.
  ksMAHexagonal      = 3   ///< Гексогональная сетка.
};


/// Тип цвета редактирования.
enum ksEditColorTypeEnum : int
{
  ksECSelectObject  = 0,  ///< Подсвечивание - Выделенный объект.
  ksECChooseObject1 = 1,  ///< Подсвечивание - Указанный объект 1.
  ksECChooseObject2 = 2,  ///< Подсвечивание - Указанный объект 2.
  ksECChooseObject3 = 3,  ///< Подсвечивание - Указанный объект 3.
  ksECPassiveParts  = 4,  ///< Контекстное редактирование - Пассивные компоненты.
  ksECFacePhantom   = 5,  ///< Фантом грани.
  ksECLabelsPhantom = 6,  ///< Фантом надписи.
  ksECDimensions    = 7   ///< Размеры.
};


/// Опции проецирования.
enum ksProjectionOptionEnum : int
{
  ksPOUndefined = -1,  ///< Неопределенное состояние .
  ksPODisable   = 0,  ///< Не проецировать.
  ksPOEnable    = 1,  ///< Проецировать.
  ksPOByLayer   = 2   ///< По слою.
};


/// Состояние видимости объекта.
enum ksVisibleStateEnum : int
{
  ksVSUndefined = -1,  ///< Неопределенное состояние .
  ksVSVisible   = 0,  ///< Видимый.
  ksVSHidden    = 1,  ///< Невидимый.
  ksVSByLayer   = 2   ///< По слою.
};


/// Способ редактирования.
enum ksEditableStateEnum : int
{
  ksESUndefined = -1,  ///< Неопределенное состояние .
  ksESDisable   = 0,  ///< Не редактировать.
  ksESEnable    = 1,  ///< Редактировать.
  ksESByLayer   = 2   ///< По слою.
};


/// Способ пересчета размера.
enum ksToleranceRecalcsEnum : int
{
  ksTRUnknown       = 0,  ///< Неопределенное состояние.
  ksTRLowerLimit    = 1,  ///< По нижнему пределу.
  ksTRTopLimit      = 2,  ///< По верхнему пределу.
  ksTRMiddle        = 3,  ///< В середину поля допуска.
  ksTRCoefficient   = 4,  ///< С коэффициентом.
  ksTRUser          = 5   ///< Пользовательский вариант пересчета(Для вставки).
};


/// Размещение неуказанной шероховатости.
enum ksSpecRoughPlacementEnum : int
{
  ksRPTopLeft     = 0,  ///< Верху слева.
  ksRPTopRight  = 1,  ///< Верху справа.
  ksRPBottomRight  = 2   ///< Внизу справа.
};


/// Тип математической кривой в трехмерном пространстве.
enum ksMathCurve3DTypeEnum : int
{
  ks3DCurve                  = 0,  ///< Кривая.
  ksLine3D                   = 1,  ///< Прямая.
  ksLineSegment3D            = 2,  ///< Отрезок прямой.
  ksArc3D                    = 3,  ///< Окружность, эллипс, дуга.
  ksSpiral                   = 4,  ///< Спираль.
  ksConeSpiral               = 5,  ///< Коническая спираль.
  ksCurveSpiral              = 6,  ///< Спираль по образующей кривой.
  ksCrookedSpiral            = 7,  ///< Спираль по направляющей кривой.
  ksPolyCurve3D              = 8,  ///< Кривая, построенная по точкам.
  ksPolyline3D               = 9,  ///< Полилиния.
  ksNurbs3D                  = 10,  ///< NURBS кривая.
  ksBezier3D                 = 11,  ///< Кривая Безье.
  ksHermit3D                 = 12,  ///< Составной кубический сплайн Эрмита.
  ksCubicSpline3D            = 13,  ///< Кубический сплайн.
  ksPlaneCurve               = 14,  ///< Плоская кривая в пространстве.
  ksOffsetCurve3D            = 15,  ///< Эквидистантная кривая.
  ksTrimmedCurve3D           = 16,  ///< Усеченная кривая.
  ksReparamCurve3D           = 17,  ///< Репараметризованная кривая.
  ksBridgeCurve3D            = 18,  ///< Кривая-мостик, соединяющая две кривые.
  ksCharacterCurve3D         = 19,  ///< Кривая, координатные функции которой заданы в символьном виде.
  ksContourOnSurface         = 20,  ///< Контур на поверхности.
  ksContourOnPlane           = 21,  ///< Контур на плоскости.
  ksSurfaceCurve             = 22,  ///< Кривая на поверхности.
  ksSilhouetteCurve          = 23,  ///< Силуэтная кривая.
  ksSurfaceIntersectionCurve = 24,  ///< Кривая пересечения поверхностей.
  ksBSpline                  = 25,  ///< В-сплайн.
  ksContour3D                = 26   ///< Контур.
};


/// Тип математической поверхности в трехмерном пространстве.
enum ksMathSurface3DTypeEnum : int
{
  ks3DSurface                = 0,  ///< Поверхность.
  ksElementarySurface        = 1,  ///< Элементарная поверхность.
  ksPlane                    = 2,  ///< Плоскость.
  ksConeSurface              = 3,  ///< Коническая поверхность.
  ksCylinderSurface          = 4,  ///< Цилиндрическая поверхность.
  ksSphereSurface            = 5,  ///< Сфера.
  ksTorusSurface             = 6,  ///< Тор.
  ksSweptSurface             = 7,  ///< Поверхность движения.
  ksExtrusionSurface         = 8,  ///< Поверхность перемещения.
  ksRevolutionSurface        = 9,  ///< Поверхность вращения.
  ksEvolutionSurface         = 10,  ///< Кинематическая поверхность.
  ksExactionSurface          = 11,  ///< Кинематическая поверхность с поворотными торцами.
  ksExpansionSurface         = 12,  ///< Плоскопараллельная поверхность.
  ksElevationSurface         = 13,  ///< Поверхность по сечениям с направляющей.
  ksSpiralSurface            = 14,  ///< Спиральная поверхность.
  ksRuledSurface             = 15,  ///< Линейчатая поверхность.
  ksSectorSurface            = 16,  ///< Секториальная поверхность.
  ksPolySurface              = 17,  ///< Поверхность, определяемая точками.
  ksHermitSurface            = 18,  ///< Hermit поверхность, определяемая точками.
  ksSplineSurface            = 19,  ///< NURBS поверхность, определяемая точками.
  ksGridSurface              = 20,  ///< Поверхность, определяемая точками.
  ksTriBezierSurface         = 21,  ///< Треугольная Bezier поверхность, определяемая точками.
  ksSimplexSurface           = 22,  ///< Треугольная NURBS поверхность, определяемая точками.
  ksOffsetSurface            = 23,  ///< Эквидистантная поверхность.
  ksDeformedSurface          = 24,  ///< Деформированная поверхность.
  ksNurbsSurface             = 25,  ///< NURВS поверхность, определяемая кривыми.
  ksCornerSurface            = 26,  ///< Поверхность по трем кривым.
  ksCoverSurface             = 27,  ///< Поверхность по четырем кривым.
  ksCoonsPatchSurface        = 28,  ///< Бикубическая поверхность Кунса по четырем кривым.
  ksMeshSurface              = 29,  ///< Поверхность на сетке кривых.
  ksLoftedSurface            = 30,  ///< Поверхность Эрмита, определяемая кривыми.
  ksSmoothSurface            = 31,  ///< Поверхность coпряжения.
  ksChamferSurface           = 32,  ///< Поверхность фаски.
  ksFilletSurface            = 33,  ///< Поверхность cкругления.
  ksChannelSurface           = 34,  ///< Поверхность cкругления с переменным радиусом.
  ksJoinSurface              = 35,  ///< Поверхность соединения.
  ksCurveBoundedSurface      = 36,  ///< Поверхность, усеченная кривыми (контурами) на поверхности.
  ksBendedUnbendedSurface    = 37,  ///< Поверхность, полученная сгибом/разгибом.
  ksCylindricBendedSurface   = 38,  ///< Поверхность, полученная цилиндрическим сгибом.
  ksCylindricUnbendedSurface = 39,  ///< Поверхность, полученная цилиндрическим разгибом.
  ksConicBendedSurface       = 40,  ///< Поверхность, полученная коническим сгибом.
  ksConicUnbendedSurface     = 41,  ///< Поверхность, полученная коническим разгибом.
  ksExplorationSurface       = 42,  ///< Поверхность заметания с масштабированием и поворотом образующей кривой.
  ksFreeSurface              = 200   ///< Тип для поверхностей, созданных пользователем.
};


/// Способ расчета длины продолжения сгиба листового тела.
enum ksLengthBuildingTypeEnum : int
{
  ksLBDistance  = 0,  ///< На расстояние.
  ksLBToVertex  = 2,  ///< До вершины.
  ksLBToSurface = 3   ///< До поверхности.
};


/// Способ ориентации экземпляров массива.
enum ksPatternExemplarsOrientationTypeEnum : int
{
  ksOrientationSave     = 0,  ///< Сохранять исходную ориентацию.
  ksOrientationByNormal = 1,  ///< Доворачивать до нормали.
  ksOrientationByObject = 2   ///< Ориентировать по объекту.
};


/// Возможные элементы отрисовки модели.
enum ksModelDrawingElementsEnum : int
{
  ksModelDrawingElementNone       = 0x0000,  ///< Пусто.
  ksModelDrawingElementBackground = 0x0001,  ///< Фоновая подложка.
  ksModelDrawingElementCompBodies = 0x0010,  ///< Тела компонента.
  ksModelDrawingElementCompObjs   = 0x0020,  ///< Объекты компонента.
  ksModelDrawingElementAuxObjs    = 0x0100,  ///< Внешние объекты.
  ksModelDrawingElementNotifyLibs = 0x0200,  ///< Библиотеки на подписке.
  ksModelDrawingElementEditor     = 0x1000,  ///< Элементы редактора, включая эскиз и фантомы.
  ksModelDrawingElementWidgets    = 0x2000,  ///< Элементы управления, оконная сетка и пр.
  ksModelDrawingElementMeshCutter = 0x4000,  ///< Сечение модели.
  ksModelDrawingElementAll        = 0xffff   ///< Все элементы сразу.
};


/// Варианты выравнивания направлений для сопряжений.
enum ksMateConstraintAlignmentEnum : int
{
  ksMCAlignmentOpposite   = -1,  ///< Противонаправленные.
  ksMCAlignmentClosest    =  0,  ///< Ориентация согласно ближайшего решения.
  ksMCAlignmentCooriented =  1,  ///< Сонаправленные, с одинаковой ориентацией.
  ksMCAlignmentUnknown    =  2,  ///< Нет определенной ориентации.
  ksMCAlignment_1         = 3,  ///< Дополнительный вариант 1.
  ksMCAlignment_2         = 4,  ///< Дополнительный вариант 2.
  ksMCAlignment_3         = 5,  ///< Дополнительный вариант 3.
  ksMCReverse_1         = 6,  ///< Противонаправленные. Дополнительный вариант 1.
  ksMCReverse_2         = 7,  ///< Противонаправленные. Дополнительный вариант 2.
  ksMCReverse_3         = 8   ///< Противонаправленные. Дополнительный вариант 3.
};


/// Фиксация компонентов при создании сопряжения.
enum ksMateFixedTypeEnum : int
{
  ksMFixedUnknown = 0,  ///< Неопределено.
  ksMFixedPart1  =  1,  ///< Фиксировать первый компонент.
  ksMFixedPart2  =  2   ///< Фиксировать второй компонент.
};


/// Фиксация компонентов при создании сопряжения.
enum ksMateTangentTypeEnum : int
{
  ksMTangentUnknown          = 0,  ///< Неопределено.
  ksMTangentByPoint          = 1,  ///< Касание в общем случае (контакт точкой).
  ksMTangentByGeneratrixLine = 2,  ///< Касание по образующей прямой (например два цилиндра с параллельными осями).
  ksMTangentByCircle         = 3   ///< Касание по окружности (например сфера в конусе).
};


/// Тип проекции.
enum ksViewProjectionType : int
{
  ksVPNone       = -1,  ///< Не определена.
  ksVPNormalTo   = 0,  ///< Нормально к.
  ksVPFront      = 1,  ///< Спереди - Фронтальная плоскость.
  ksVPRear       = 2,  ///< Сзади.
  ksVPUp         = 3,  ///< Сверху - Горизонтальная плоскость.
  ksVPDown       = 4,  ///< Снизу.
  ksVPLeft       = 5,  ///< Слева - Профильная плоскость.
  ksVPRight      = 6,  ///< Справа.
  ksVPIsometric  = 7,  ///< Изометрия.
  ksVPDimetric   = 8,  ///< Диметрия.
  ksVPUnfold     = 9,  ///< Развертка.
  ksVPUser       = 10   ///< Пользовательская проекция.
};


/// Способ определения глубины отверстия.
enum ksDepthTypeEnum : int
{
  ksDTValue        = 0,  ///< На расстояние.
  ksDTReachThrough = 1,  ///< Через все.
  ksDTObject       = 2   ///< До объекта.
};


/// Форма торца отверстия.
enum ksEndFaceTypeEnum : int
{
  ksEFFlat   = 0,  ///< Плоский.
  ksEFConic  = 1,  ///< Конический.
  ksEFSphere = 2   ///< Сферический.
};


/// Тип отверстия.
enum ksHoleTypeEnum : int
{
  ksHTBase           = 0,  ///< Простое.
  ksHTCounterbore    = 1,  ///< С цековкой.
  ksHTCountersinking = 2,  ///< С зенковкой.
  ksHTCounterdrill   = 3,  ///< С цековкой и зенковкой.
  ksHTConic          = 4,  ///< Коническое.
  ksHTLfrLibrary     = 5   ///< Отверстие из библиотеки.
};


/// Способ определения параметров зенковки.
enum ksCountersinkTypeEnum : int
{
  ksCTDiameterAngle = 0,  ///< По диаметру и углу.
  ksCTDepthAngle    = 1,  ///< По глубине и углу.
  ksCTDiameterDepth = 2   ///< По диаметру и глубине.
};


/// Способ определения параметров конического отверстия.
enum ksConicTypeEnum : int
{
  ksCNDiameter = 0,  ///< По диаметру верхнего основания конуса.
  ksCNAngle    = 1   ///< По углу конуса.
};


/// Схема ориентаций модели.
enum ksViewProjectionScheme : int
{
  ksVPSUnknown           = -1,  ///< Не определена.
  ksVPSUser              = 0,  ///< Пользовательская.
  ksVPSZAxonometric      = 1,  ///< Z-аксонометрия.
  ksVPSYAxonometric      = 2,  ///< Y-аксонометрия.
  ksVPSXAxonometric      = 3,  ///< X-аксонометрия.
  ksVPSZ90AxonometricISO = 4,  ///< Z-аксонометрия (ISO 90).
  ksVPSY90AxonometricISO = 5,  ///< Y-аксонометрия (ISO 90).
  ksVPSX90AxonometricISO = 6   ///< X-аксонометрия (ISO 90).
};


/// Тип движения компонента для механического сопряжения.
enum ksMateMotionTypeEnum : int
{
  ksMMotionUnknown  = 0,  ///< Неопределено.
  ksMMotionLinear   = 1,  ///< Линейное перемещение.
  ksMMotionRotation = 2   ///< Вращение.
};


/// Управляющие разрешением на чтение или запись объектов в дополнительные форматы jgs, sat, xt, step, stl, VRML, JT.
enum ksD3ConverterOptionsEnum : int
{
  ksD3COBodyes                = 0,  ///< Разрешение на чтение\запись твёрдых тел.
  ksD3COSurfaces              = 2,  ///< Разрешение на чтение\запись поверхностей.
  ksD3COCurves                = 4,  ///< Разрешение на чтение\запись кривых.
  ksD3COSketches              = 6,  ///< Разрешение на чтение(не применяется)\запись эскизов.
  ksD3COInvisibleObjects      = 8,  ///< Разрешение на чтение(не применяется)\запись невидимых объектов.
  ksD3COPoints                = 10,  ///< Разрешение на чтение\запись точек.
  ksD3CODocumentProperties    = 12,  ///< Разрешение на чтение\запись информации о документе (автор, организация, комментарии).
  ksD3COTechnicalDemand       = 14,  ///< Разрешение на чтение\запись технических требований.
  ksD3CODimensions            = 16,  ///< Разрешение на чтение\запись размеров.
  ksD3COAttributes            = 18,  ///< Разрешение на чтение\запись атрибутов объектов.
  ksD3CBRep                   = 20,  ///< Разрешение на чтение\запись форм изделий в граничном представлении (только в JT).
  ksD3CPolygonal              = 22,  ///< Разрешение на чтение\запись полигональных форм изделий.
  ksD3CPolygonalLOD0          = 24,  ///< Разрешение на чтение\запись полигональных форм изделий уровня детализации 0.
  ksD3CAssociated             = 26,  ///< Разрешение на чтение ассоциированной геометрии (резьбы и др).
  ksD3COStyle                 = 28,  ///< Разрешение на чтение\запись элементов оформления (цвет, начертание, и т.п.).
  ksD3CODensity               = 30,  ///< Разрешение на чтение\запись единиц плотности.
  ksD3COValidationProperties  = 32   ///< Разрешение на чтение\запись контрольных параметров - объёма, площади поверхности, центра масс.
};


/// Способы вычисления приращения параметра по объекту.
enum ksStepTypeEnum : int
{
  ksSpaceStep             = 0x01,  ///< Шаг по стрелке прогиба.
  ksDeviationStep         = 0x02,  ///< Шаг по углу отклонения.
  ksMetricStep            = 0x04,  ///< Шаг по длине.
  ksParamStep             = 0x08,  ///< Шаг для для привязки объектов к параметрам поверхности.
  ksCollisionStep         = 0x10,  ///< Шаг для определения столкновений элементов модели.
  ksMipStep               = 0x20   ///< Шаг для расчета инерционных характеристик.
};


/// Пердставление текста при экспорте.
enum ksTextExportFormEnum : int
{
  ksTEFTextOnly           = 0,  ///< Только текст.
  ksTEFGeometryOnly       = 1   ///< Геометрическое представление текста.
};


/// Состояние объекта.
enum ksFeatureStateEnum : int
{
  ksFSNone              = 0,  ///< Состояния не определены.
  ksFSLocked            = 0x1,  ///< Объект заблокирован\Только чтение.
  ksFSRebuild           = 0x2,  ///< Необходимо перестроить модель.
  ksFSInside3dMacro     = 0x4,  ///< Объект включен в состав трехмерного макроэлемента.
  ksFSLCSDependent      = 0x8,  ///< Зависимость от ЛСК.
  ksFSComprisedOfParts  = 0x10,  ///< Тело состоит из частей.
  ksFSCurrent           = 0x20,  ///< Текущая СК.
  ksFSReadOnlyAccessM3d = 0x40,  ///< Файл компонента (m3d) имеет доступ 'Только чтение'.
  ksFSDetailedFold      = 0x80,  ///< Развернутый сгиб.
  ksFSSketchUndefined   = 0x100,  ///< Эскиз не определен.
  ksFSSketchDefined     = 0x200,  ///< Эскиз определен.
  ksFSSketchRedefined   = 0x400,  ///< Эскиз переопределен.
  ksFSEditRestricted    = 0x800,  ///< Редактирование запрещено, но запрет можно снять.
  ksFSEditImpossible    = 0x1000,  ///< Редактирование запрещено.
  ksFSFixedComponent    = 0x2000,  ///< Компонент зафиксирован.
  ksFSPutInRecalcState  = 0x4000,  ///< Вставка компонента в пересчитанном состоянии.
  ksFSReadOnlyAccessA3d = 0x8000,  ///< Файл компонента (a3d) имеет доступ 'Только чтение'.
  ksFSUncuttable        = 0x10000,  ///< Неразрезаемый компонент.
  ksFSUpdateNeeded      = 0x100000,  ///< Необходимость обновления.
  ksFSBrokenLink        = 0x200000   ///< Разрыв связи копии геометрии с источником.
};


/// Типы построения фаски.
enum ksChamferBuildingTypeEnum : int
{
  ksChamferSideAngle = 0,  ///< По стороне и углу.
  ksChamferTwoSides  = 1   ///< По двум сторонам.
};


/// Типы построения скругления.
enum ksFilletBuildingTypeEnum : int
{
  ksFilletCircleArc   = 0,  ///< Дугой окружности.
  ksFilletEllipseArc  = 1,  ///< Дугой эллипса.
  ksFilletCoefficient = 2,  ///< С коэффициентом (0 < K < 1).
  ksFilletHord        = 3   ///< С постоянной хордой.
};


/// Способ расчета смещения для точек останова скругления.
enum ksFilletOffsetModeEnum : int
{
  ksFilletOffsetByPersent = 0,  ///< В процентах от длины кривой.
  ksFilletOffsetByLength  = 1,  ///< По длине сегмента.
  ksFilletOffsetByAngle   = 2   ///< По центральному углу дуги.
};


/// Положение ребра жесткости.
enum ksRibSideEnum : int
{
  ksRibSideLeft  = 0,  ///< Прямое направление в плоскости эскиза.    Ребро выдавливается в левую сторону от кривой вдоль плоскости.
  ksRibSideRight = 1,  ///< Обратное направление в плоскости эскиза.  Ребро выдавливается в правую сторону от кривой вдоль плоскости.
  ksRibSideUp    = 2,  ///< Прямое направление ортогонально эскизу.   Ребро выдавливается в сторону нормали плоскости.
  ksRibSideDown  = 3   ///< Обратное направление ортогонально эскизу. Ребро выдавливается в сторону против нормали плоскости.
};


/// Результат операции.
enum ksOperationResultEnum : int
{
  ksOperationUnion        = 0,  ///< Объединение.
  ksOperationNewBody      = 1,  ///< Новое тело.
  ksOperationCut          = 2,  ///< Вычитание.
  ksOperationIntersect    = 3   ///< Пересечение.
};


/// Способы построения элемента по сечениям у крайних сечений.
enum ksLoftBuildingType : int
{
  ksLoftAuto     = 0,  ///< Автоматически.
  ksLoftByNormal = 1,  ///< По нормали.
  ksLoftByObject = 2,  ///< По объекту.
  ksLoftCupola   = 3   ///< Купол.
};


/// Тип движения сечения в кинематической операции .
enum ksEvolutionShiftSketchTypeEnum : int
{
  ksEvShiftParallel  = 0,  ///< Образующая переносится параллельно самой себе.
  ksEvShiftKeepAngle = 1,  ///< Образующая при переносе сохраняет исходный угол с направляющей.
  ksEvShiftOrtogonal = 2   ///< Плоскость образующей выставляется и сохраняется ортогональной направляющей.
};


/// Способы построения сгиба по эскизу.
enum ksSketchBendBuildingTypeEnum : int
{
  ksSBFromSketch     = 1,  ///< От эскиза.
  ksSBSomeEdges      = 2   ///< Вдоль всего ребра.
};


/// Тип замыкания операции сгиб по эскизу листового тела.
enum ksClosingTypeEnum : int
{
  ksClosingAngles = 0,  ///< Замыкание смежных углов.
  ksClosingBegin  = 1,  ///< Замыкание в начале.
  ksClosingEnd    = 2   ///< Замыкание в конце.
};


/// Обработка угла при замыкании.
enum ksClosingCorneringEnum : int
{
  ksCorneringNone          = 0,  ///< Без обработки.
  ksCorneringJointOnBorder = 1,  ///< Стык по кромке.
  ksCorneringJointOnChord  = 2,  ///< Стык по хорде.
  ksCorneringCircled       = 3   ///< Круговая.
};


/// Размещение отверстия при круговой обработке угла.
enum ksClosingHolePlacementEnum : int
{
  ksCorneringHPBend        = 0,  ///< На пересечении сгибов.
  ksCorneringHPAngle       = 1,  ///< В точке угла.
  ksCorneringHPPoint       = 2   ///< Через точку угла.
};


/// Способ замыкании углов листового тела.
enum ksClosingClosedTypeEnum : int
{
  ksClosingCJoint        = 0,  ///< Замыкание встык.
  ksClosingCOver         = 1,  ///< Замыкание с перекрытием.
  ksClosingCTightClosure = 2   ///< Плотное замыкание.
};


/// Способ задания размера.
enum ksUndercutDistanceTypeEnum : int
{
  ksUCDictanceOut = 0,  ///< Снаружи.
  ksUCDictanceIn  = 1,  ///< Внутри.
  ksUCDictanceAll = 2   ///< Полный.
};


/// Способ создания сечения.
enum ksCutBuildingTypeEnum : int
{
  ksCutByContour = 0,  ///< Сечение контуром.
  ksCutByPlane   = 1   ///< Сечение плоскостью.
};


/// Тип буртика. Способ обработки концов буртика.
enum ksShoulderTypeEnum : int
{
  ksShoulderClosed  = 0,  ///< Закрытый.
  ksShoulderOpened  = 1,  ///< Открытый.
  ksShoulderChopped = 2   ///< Рубленный.
};


/// Форма сечения буртика.
enum ksShoulderCutingTypeEnum : int
{
  ksShoulderCutingCircle = 0,  ///< Круговая.
  ksShoulderCutingU      = 1,  ///< U-образная.
  ksShoulderCutingV      = 2   ///< V-образная.
};


/// Способ построения буртика.
enum ksShoulderBuildingTypeEnum : int
{
  ksShoulderUnknown = 0,    //  ///< Неопределено.
  ksShoulderWidth1  = 0x01,  ///< Использовать при расчете ширину основания.
  ksShoulderHeight  = 0x02,  ///< Использовать при расчете высоту.
  ksShoulderAngle   = 0x04,  ///< Использовать при расчете угол.
  ksShoulderWidth2  = 0x08,  ///< Использовать при расчете ширину дна.
  ksShoulderRadius2 = 0x10,  ///< Использовать при расчете радиус буртика.
  ksShoulderWidth1Off  = -0x01,  ///< Не использовать при расчете ширину основания.
  ksShoulderHeightOff  = -0x02,  ///< Не использовать при расчете высоту.
  ksShoulderAngleOff   = -0x04,  ///< Не использовать при расчете угол.
  ksShoulderWidth2Off  = -0x08,  ///< Не использовать при расчете ширину дна.
  ksShoulderRadius2Off = -0x10,  ///< Не использовать при расчете радиус буртика.
  ksShoulderCircleByHeightWidth1  = ksShoulderHeight  | ksShoulderWidth1,  ///< Круговая по высоте и ширине основания.
  ksShoulderCircleByHeightRadius2 = ksShoulderHeight  | ksShoulderRadius2,  ///< Круговая по высоте и радиусу буртика.
  ksShoulderCircleByRadiusWidth1  = ksShoulderRadius2 | ksShoulderWidth1,  ///< Круговая по радиусу буртика и ширине основания.
  ksShoulderUByHeighAngleWidth1         = ksShoulderHeight | ksShoulderAngle  | ksShoulderWidth1,  ///< U-образная по высоте, углу и ширине основания.
  ksShoulderUByHeighAngleWidthRadius2   = ksShoulderHeight | ksShoulderAngle  | ksShoulderWidth1 | ksShoulderRadius2,  ///< U-образная по высоте, углу и ширине основания со скруглением дна.
  ksShoulderUByHeighWidth1Width2        = ksShoulderHeight | ksShoulderWidth1 | ksShoulderWidth2,  ///< U-образная по высоте, ширине основания и ширине дна (две ширины).
  ksShoulderUByHeighWidth1Width2Radius2 = ksShoulderHeight | ksShoulderWidth1 | ksShoulderWidth2 | ksShoulderRadius2,  ///< U-образная по высоте, ширине основания и ширине дна (две ширины) со скруглением дна.
  ksShoulderUByAngleWidth1Width2        = ksShoulderAngle  | ksShoulderWidth1 | ksShoulderWidth2,  ///< U-образная по углу, ширине основания и ширине дна (две ширины).
  ksShoulderUByAngleWidth1Width2Radius2 = ksShoulderAngle  | ksShoulderWidth1 | ksShoulderWidth2 | ksShoulderRadius2,  ///< U-образная по углу, ширине основания и ширине дна (две ширины) со скруглением дна.
  ksShoulderUByHeighAngleWidth2         = ksShoulderHeight | ksShoulderAngle  | ksShoulderWidth2,  ///< U-образная по высоте, углу и ширине дна.
  ksShoulderUByHeighAngleWidth2Radius2  = ksShoulderHeight | ksShoulderAngle  | ksShoulderWidth2 | ksShoulderRadius2,  ///< U-образная по высоте, углу и ширине дна со скруглением дна.
  ksShoulderVByHeighAngleWidth1         = ksShoulderHeight | ksShoulderAngle  | ksShoulderWidth1,  ///< V-образная по высоте, углу и ширине основания.
  ksShoulderVByHeighAngleRadius2        = ksShoulderHeight | ksShoulderAngle  | ksShoulderRadius2,  ///< V-образная по высоте, углу и радиусу буртика.
  ksShoulderVByRadius2AngleWidth1       = ksShoulderRadius2| ksShoulderAngle  | ksShoulderWidth1,  ///< V-образная по радиусу буртика, углу и ширине основания.
  ksShoulderVByHeighRadius2Width1       = ksShoulderHeight | ksShoulderRadius2| ksShoulderWidth1   ///< V-образная по высоте, радиусу буртика и ширине основания.
};


/// Способ построения жалюзей.
enum ksJalousieBuildingTypeEnum : int
{
  ksJalousieExtract  = 0,  ///< Вытяжка.
  ksJalousieTrim     = 1   ///< Подрезка.
};


/// Форма торца жалюзей.
enum ksJalousieFormEndEnum : int
{
  ksJalousieTangent  = 0,  ///< По направлению.
  ksJalousieNormal    = 1   ///< По нормали к толщине.
};


/// Способ задания высоты жалюзей.
enum ksJalousieHeightTypeEnum : int
{
  ksJalousieAllHeight      = 0,  ///< Полная.
  ksJalousieUpToFaceHeight = 1,  ///< От грани.
  ksJalousieSlotHeight     = 2   ///< Высота прорези.
};


/// Способ задания высоты штамповки.
enum ksPressFormingHeightTypeEnum : int
{
  ksPressFormingAllHeight = 0,  ///< Полная.
  ksPressFormingOutHeight = 1,  ///< Снаружи.
  ksPressFormingInHeight  = 2   ///< Внутри.
};


/// Способ создания сопряжения в заданной вершине сплайна.
enum ksSplineTransitionTypeEnum : int
{
  ksSTTNone       = 0,  ///< Не задан.
  ksSTTByParam    = 1,  ///< Параметрами.
  ksSTTConstraint = 2   ///< Сопряжением.
};


/// Индекс вектора в точке сопряжения.
enum ksTransitionVectorIndexEnum : int
{
  ksTVTangent     = 0,  ///< Касательный.
  ksTVNormal      = 1,  ///< Нормальный.
  ksTVBNormal     = 2   ///< Би-нормальный.
};


/// Способ построения ребра усилиния.
enum ksSHRibBuildingTypeEnum : int
{
  ksSHRibBuildingHeightAngle = 0,  ///< По стороне и углу.
  ksSHRibBuildingTwoHeights  = 1,  ///< По двум сторонам.
  ksSHRibBuildingDepthAngle  = 2   ///< По глубине и углу.
};


/// Форма сечения ребра усиления.
enum ksSHRibCutingTypeEnum : int
{
  ksSHRibCuttingV = 0,  ///< V-образная.
  ksSHRibCuttingU = 1   ///< U-образная.
};


/// Типы смещений зазора.
enum ksOffsetGapType : int
{
  ksOGParametrU     = 0,  ///< По параметру U.
  ksOGLength        = 1,  ///< По длине.
  ksOGDraftPosition = 2   ///< Угол расположения.
};


/// Типы кромки оснований.
enum ksRuledBorderEnum : int
{
  ksRuledBodder1 = 0,  ///< Перпендикулярно плоскости листа.
  ksRuledBodder2 = 1   ///< Совпадение с поверхностями оснований.
};


/// Типы кромки стыка.
enum ksRuledJointEnum : int
{
  ksRuledJoint1 = 0,  ///< Перпендикулярно поверхности листа.
  ksRuledJoint2 = 1   ///< Параллельно друг другу.
};


/// Способ сегментации эскиза.
enum ksSegmentationMethodEnum : int
{
  ksSmQuantity = 0,  ///< По количеству сегментов.
  ksSmLength   = 1,  ///< По длине сегментов.
  ksSmAngle    = 2,  ///< По углу.
  ksSmHeight   = 3   ///< По величине отклонения от хорды.
};


/// Способ создания зоны.
enum ksZoneTypeEnum : int
{
  ksZoneFree      = 0,  ///< Зона без параметров (Результат операции разбиение зон).
  ksZoneByPoints  = 1,  ///< По координатам габаритного прямоугольника.
  ksZoneByObjects = 2   ///< По суммарному габариту объектов.
};


/// Способ разбиения зоны.
enum ksZoneDivisionTypeEnum : int
{
  ksZoneDivisionRegular  = 0,  ///< Равномерно по осям.
  ksZoneDivisionByPlanes = 1   ///< По набору плоскостей.
};


/// Способ задания габаритов.
enum ksGabaritBuildingTypeEnum : int
{
  ksGabaritByBorderPoints    = 0,  ///< По двум вершинам.
  ksGabaritByCenterAndBorder = 1   ///< По центру и вершине.
};


/// Способ создания шага сечения модели.
enum ksDynamicCrossSectionStepBuildingTypeEnum : int
{
  ksDCSTUnknown        = -1,  ///< Неопределенный.
  ksDCSTByFreePlane    = 0,  ///< Произвольная плоскость.
  ksDCSTByOffsetPlane  = 1,  ///< Смещенная плоскость.
  ksDCSTByRotatedPlane = 2,  ///< Повернутая плоскость.
  ksDCSTByZone         = 3,  ///< Задано зоной.
  ksDCSTByBorderPoints = 4   ///< Параллелепипед.
};


/// Способ построения секущей плоскости для шага динамического сечения.
enum ksCrossSectionPlaneBuildingTypeEnum : int
{
  ksCrossSectionPlaneByModelPlane = 0,  ///< По плоскости модели.
  ksCrossSectionPlaneByOtherStep  = 1   ///< По плоскости сечения предыдущего шага.
};


/// Способ задания глубины прогиба.
enum ksArchMeasureEnum : int
{
  ksArchMeasureByCoefficient = 0,  ///< Глубина прогиба задана коэффициентом прогиба, в %.
  ksArchMeasureByLength      = 1   ///< Глубина прогиба задана расстоянием.
};


/// Способ разбиения зоны.
enum ksManipulatorTypeEnum : int
{
  ksPlacement3DManipulator  = 1,  ///< Манипулятор системы координат.
  ksEditDoubleManipulator   = 2   ///< Манипулятор - редактор вещественного значения.
};


/// Тип примитива манипулятора.
enum ksManipulatorPrimitiveEnum : int
{
  ksMPNone     = 0,  ///< Неизвестный тип.
  ksMPAxisX    = 1,  ///< Ось X.
  ksMPAxisY    = 2,  ///< Ось Y.
  ksMPAxisZ    = 3,  ///< Ось Z.
  ksMPPlaceXOY = 4,  ///< Плоскость XOY.
  ksMPPlaceXOZ = 5,  ///< Плоскость XOZ.
  ksMPPlaceYOZ = 6,  ///< Плоскость YOZ.
  ksMPConturXY = 7,  ///< Граница плоскости XOY.
  ksMPConturXZ = 8,  ///< Граница плоскости XOZ.
  ksMPConturYZ = 9,  ///< Граница плоскости YOZ.
  ksMPTextX    = 10,  ///< Текст X.
  ksMPTextY    = 11,  ///< Текст Y.
  ksMPTextZ    = 12,  ///< Текст Z.
  ksMPOriginal = 13   ///< Начало координат.
};


/// Режимы работы манипулятора.
enum ksManipulatorModeEnum : int
{
  ksManipulatorModeDefault         = 1,  ///< По умолчанию.
  ksManipulatorModeNotHandleEditor = 2   ///< Запрет ручного редактирования.
};


/// Режим использования прямоугольной рамки для выделения объектов.
enum ksSelectionBandMode : int
{
  ksSelectionNoBand               = 0,  ///< Не использовать селектирование рамкой.
  ksSelectionWhenNoNearestObject  = 2   ///< Начинать тащить рамку когда под курсором нет объекта.
};


/// Тип объектов для фильтрации в процессе.
enum ksProcessObjectsFilter3DEnum : int
{
  ksProcessFilterBodies          =  0,  ///< Фильтровать тела.
  ksProcessFilterSurfaces        =  1,  ///< Фильтровать поверхности.
  ksProcessFilterObjects         =  2,  ///< Объекты модели не являющиеся операциями.
  ksProcessFilterOperations      =  3,  ///< Операции.
  ksProcessFilterParts           =  4,  ///< Фильтровать компоненты.
  ksProcessFilterExcludeExternalObjects =  1000   ///< Отсекать объекты других компонентов не находящехся сейчас в режиме редактирования на месте.
};


/// Способ построения операции копия геометрии.
enum ksCopyGeometryBuildingTypeEnum : int
{
  ksCGBTWithoutGrouping     = 0,  ///< Без группировки.
  ksCGBTBodyFaceGrouping    = 1   ///< Собрать грани по исходным элементам. C группировкой граней одного тела.
};


/// Тип разнотолщинной группы.
enum ksMultiThicknessGroupTypeEnum : int
{
  ksArbitraryThicknesses = 0,  ///< Группы произвольных толщин.
  ksSetsThicknesses      = 1   ///< группы наборов толщин.
};


/// Тип текстуры.
enum ksTextureTypeEnum : int
{
  ksBaseProperties = -1, //  ///< Все.
  ksTexture        =  0,  ///< Текстура.
  ksRelief         =  1,  ///< Рельеф.
  ksCutting        =  2   ///< Вырезы.
};


/// Способ построения для штамповки телом. Инструмент.
enum ksSheetMetalPunchBuildingTypeEnum : int
{
  ksSheetMetalPunch  = 0,  ///< Пуансон.
  ksSheetMetalMatrix = 1   ///< Матрица.
};


/// Способ задания толщины для штамповки телом.
enum ksSheetMetalPunchThicknessTypeEnum : int
{
  ksSheetMetalPunchHeightByBody = 0,  ///< Листовое тело.
  ksSheetMetalPunchHeightByValue = 1   ///< Заданное значение.
};


/// Способ масштабирования.
enum ksScalingTypeEnum : int
{
  ksScalingByCoefficient = 0,  ///< Равномерно.
  ksScalingByAxis        = 1   ///< По осям CK.
};


/// Версия оптимизации.
enum ksEvolutionVersionEnum : int
{
  ksEvolutionVersion1 = 1,  ///< Вариант 1.
  ksEvolutionVersion2 = 2   ///< Вариант 2.
};


/// Размещение технических требований.
enum ksTechnicalDemand3DPlacementEnum : int
{
  ksTdPTopRight     = 0,  ///< Верху справа.
  ksTdPBottomRight  = 1   ///< Внизу справа.
};


/// Тип ребер эскиза.
enum ksSketchEdgesTypeEnum : int
{
  ksSketchEdgesFromCurves2D = 1,  ///< Ребра исходных кривых эскиза.
  ksSketchEdgesFromFaces    = 2   ///< Ребра замкнутых областей эскиза.
};


/// Способ построения конической 3D кривой.
enum ksConicCurve3DDBuildingTypeEnum : int
{
  ksConicCurve3DVertexAndHeight = 0,  ///< Коническая кривая по вершине и дискриминанту.
  ksConicCurve3DVertexAndPointOnCurve = 1,  ///< Коническая кривая по вершине и точке на кривой.
  ksConicCurve3DTangentsAndHeight = 2,  ///< Коническая кривая по касательным и дискриминанту.
  ksConicCurve3DTangentsAndPointOnCurve = 3   ///< Коническая кривая по касательным и точке на кривой.
};


/// Индекс параметра конической 3D кривой.
enum ksConicCurve3DParameterEnum : int
{
  ksConicCurve3DBeginPoint = 0,  ///< Начальная точка.
  ksConicCurve3DEndPoint   = 1,  ///< Конечная точка.
  ksConicCurve3DVertex     = 2,  ///< Вершина.
  ksConicCurve3DOnCurve    = 3,  ///< Точка на кривой.
  ksConicCurve3DCount      = 4   ///< Количество опорных точек.
};


/// Способ построения треугольника.
enum ksConicSurfaceBuildingTypeEnum : int
{
  ksConicSurfaceBuildBySides = 0,  ///< Через задание углов двух сторон.
  ksConicSurfaceBuildByCurve = 1   ///< По вершинной кривой.
};


/// Способ построения стороны в треугольнике.
enum ksConicSurfaceSideBuildingTypeEnum : int
{
  ksConicSectionSurfaceSideByAngle = 0,  ///< От хорды.По функции угла.
  ksConicSectionSurfaceSideByFace  = 1   ///< От объекта.По направляющей грани.
};


/// Условие построения угла треугольника конической поверхности при построении по грани.
enum ksConicSurfaceSideAngleBuildingTypeEnum : int
{
  ksConicSectionSurfaceSideAngleTangent = 0,  ///< По касательной.  Результирующий угол - угол между касательной к грани и основанием треугольника.
  ksConicSectionSurfaceSideAngleNormal  = 1   ///< Перпендикулярно. Результирующий угол - угол между перпендикуляром к грани и основанием треугольника.
};


/// Способ задания формы кривой конического сечения.
enum ksConicSurfaceSectionCurveFormEnum : int
{
  ksSectionCurveByCoefficient     = 0,  ///< По коэффициенту.
  ksSectionCurveByCurveOnSurface  = 1,  ///< По кривой на поверхности.
  ksSectionCurveByTangentSurface  = 2,  ///< По касательной поверхности.
  ksSectionCurveByLeastTension    = 3   ///< Минимальное напряжение.
};


/// Движение сечения.
enum ksConicSurfaceMovementTypeEnum : int
{
  ksConicSectionSelfParallel     = 0,  ///< Параллельно самому себе.
  ksConicSectionAllongAxis       = 1,  ///< По осевой линии.
  ksConicSectionByRadial         = 2   ///< По осевой линии.
};


/// Движение сечения.
enum ksConicSectionTrianglePointEnum : int
{
  ksConicSectionTrianglePointLeft    = 0,  ///< Левая точка.
  ksConicSectionTrianglePointRight   = 1,  ///< Правая точка.
  ksConicSectionTrianglePointTop     = 2,  ///< Верхняя точка.
  ksConicSectionTrianglePointMedian  = 3   ///< Медиана из верхней точки.
};


/// Движение сечения.
enum ksSideAngleTypeEnum : int
{
  ksSideAngleValueConstant    = 0,  ///< Константное значение.
  ksSideAngleValueStart       = 1,  ///< Начальное значение.
  ksSideAngleValueEnd         = 2   ///< Конечное значение.
};


/// Способ построения при скруглении с переменным радиусом.
enum ksVariableRadiusBuildingTypeEnum : int
{
  ksVariableRadiusOff      = 0,  ///< Построение с переменным радиусом отключено.
  ksVariableRadiusByPoints = 1,  ///< Построение с переменным радиусом по точкам.
  ksVariableRadiusByCurve  = 2   ///< Построение с переменным радиусом по граничной кривой.
};


/// Способы обработки углов стыковки.
enum ksCornerFormEnum : int
{
  ksCornerFormUnknown = 0,  ///< Не срезать углы.
  ksCornerFormUniform = 2   ///< Срезать углы.
};


/// Тип вырубки кромки.
enum ksSheetMetalPunchEdgeTypeEnum : int
{
  ksPetCutted = 0,  ///< Обрезка гранью вырубки.
  ksPetNormal = 1   ///< По нормали к листовым граням.
};


/// Тип задания параметров сгибов.
enum ksParametersTypeEnum : int
{
  ksGeneral    = 0,  ///< Общие параметры.
  ksIndividual = 1   ///< Индивидуальные параметры.
};


/// Тип продления кривой.
enum ksExtensionCurveTypeEnum : int
{
  ksExtensionCurveByCurve   = 0,  ///< Продление той же кривой.
  ksExtensionCurveByTangent = 1,  ///< По касательной.
  ksExtensionCurveByCircle  = 2   ///< По окружности.
};


/// Способ построения при скруглении с переменным радиусом.
enum ksRuledSurfaceBuildingTypeEnum : int
{
  ksRuledSurfaceByCurves              = 0,  ///< Линейчатая поверхность по двум кривым.
  ksRuledSurfaceBySurfaces            = 1,  ///< Линейчатая поверхность по двум поверхностям.
  ksRuledSurfaceByCurveAndSurface     = 2,  ///< Линейчатая поверхность по кривой и поверхности.
  ksRuledSurfaceBySurfaceTangentCurve = 3,  ///< Линейчатая поверхность по кривой с касанием к поверхности.
  ksRuledSurfaceByCurveAndDir         = 4   ///< Линейчатая поверхность по кривой и направлению.
};


/// Типы движения конического сечения.
enum ksRuledSurfaceMovementTypeEnum : int
{
  ksRuledSurfaceMovementByVector = 0,  ///< По направлению, заданному вектором.
  ksRuledSurfaceMovementByCurve  = 1,  ///< Вдоль траектории, заданной кривой.
  ksRuledSurfaceMovementByRadial = 2   ///< Радиально, вокруг заданной оси.
};


/// Параметры линейчатой поверхности 'По двум кривым'.
enum ksRuledSurfaceSectionAlignmentTypeEnum : int
{
  ksRuledSurfaceSectionAlignmentByParam  = 0,  ///< По направлению, заданному вектором.
  ksRuledSurfaceSectionAlignmentByLen    = 1,  ///< Вдоль траектории, заданной кривой.
  ksRuledSurfaceSectionAlignmentByVertex = 2,  ///< Радиально, вокруг заданной оси.
  ksRuledSurfaceSectionAlignmentByPath   = 3   ///< Радиально, вокруг заданной оси.
};


/// Направление построения линейчатой поверхности.
enum ksRuledSurfaceDirectionTypeEnum : int
{
  ksRuledSurfaceDirectionTangent = 0,  ///< По касательной.
  ksRuledSurfaceDirectionNormal  = 1   ///< Перпендикулярно.
};


/// Тип аппроксимации метасплайна.
enum ksMetaSplineApproximationTypeEnum : int
{
  ksMetaSplineApproximationBezier  = 0,  ///< Безье.
  ksMetaSplineApproximationBSpline = 1   ///< B-сплайн.
};


/// Способ построения метасплайна.
enum ksMetaSplineBuildingTypeEnum : int
{
  ksMetaSplineByPoints  = 0,  ///< По точкам.
  ksMetaSplineByTangent = 1   ///< С касанием.
};


/// Уплотнение метасплайна.
enum ksMetaSplineDensityDegreeEnum : int
{
  ksMetaSplineDensityDegreeNo     = 0,  ///< Без уплотнения.
  ksMetaSplineDensityDegreeSingle = 1,  ///< Однократно.
  ksMetaSplineDensityDegreeDouble = 2   ///< Двукратно.
};


/// Сглаживание метасплайна.
enum ksMetaSplineSmoothingEnum : int
{
  ksMetaSplineSmoothingNo = 0,  ///< Сглаживание отключено.
  ksMetaSplineSmoothingYes = 1,  ///< Сглаживание включено.
  ksMetaSplineSmoothingFixCorners = 2   ///< Сглаживание острых углов.
};


/// Метод сглаживания.
enum ksSmoothingMethodEnum : int
{
  ksNoisy = 0,  ///< Сглаживание зашумленных точек.
  ksNoisyMidline = 1   ///< Сглаживание по средней линии отклонений зашумленных точек.
};


/// Способ построения.
enum ksSplineBuildingTypeEnum : int
{
  ksSpline3DOnPoles = 0,  ///< Сплайн по полюсам.
  ksSpline3DOnPoints = 1,  ///< Сплайн по точкам.
  ksSpline3DMetaSpline = 2,  ///< Метасплайн.
};
